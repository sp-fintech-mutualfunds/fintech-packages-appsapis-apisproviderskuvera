<?php
/**
 * GetFundSchemeDetails200ResponseInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Apps\Fintech\Packages\Apis\Providers\Kuvera
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Kuvera
 *
 * Unofficial read API specification for Kuvera.  See Introduction on left to get a summary.
 *
 * The version of the OpenAPI document: 
 * Contact: kuvera.api@captnemo.in
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Apps\Fintech\Packages\Apis\Providers\Kuvera\Model;

use \ArrayAccess;
use \Apps\Fintech\Packages\Apis\Providers\Kuvera\ObjectSerializer;

/**
 * GetFundSchemeDetails200ResponseInner Class Doc Comment
 *
 * @category Class
 * @package  Apps\Fintech\Packages\Apis\Providers\Kuvera
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GetFundSchemeDetails200ResponseInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'get_fund_scheme_details_200_response_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'code' => 'string',
        'name' => 'string',
        'short_name' => 'string',
        'lump_available' => 'string',
        'sip_available' => 'string',
        'lump_min' => 'float',
        'lump_min_additional' => 'float',
        'lump_max' => 'float',
        'lump_multiplier' => 'float',
        'sip_min' => 'float',
        'sip_max' => 'float',
        'sip_multiplier' => 'float',
        'sip_dates' => 'mixed[]',
        'redemption_allowed' => 'string',
        'redemption_amount_multiple' => 'float',
        'redemption_amount_minimum' => 'float',
        'redemption_quantity_multiple' => 'float',
        'redemption_quantity_minimum' => 'float',
        'category' => 'string',
        'lock_in_period' => 'float',
        'upsizecode_sip_dates' => 'mixed[]',
        'sip_maximum_gap' => 'float',
        'fund_house' => 'string',
        'fund_name' => 'string',
        'short_code' => 'string',
        'detail_info' => 'string',
        'isin' => 'string',
        'direct' => 'string',
        'switch_allowed' => 'string',
        'stp_flag' => 'string',
        'swp_flag' => 'string',
        'sips' => 'mixed[]',
        'instant' => 'string',
        'reinvestment' => 'string',
        'tags' => 'mixed[]',
        'slug' => 'string',
        'channel_partner_code' => 'string',
        'tax_period' => 'float',
        'nav' => '\Apps\Fintech\Packages\Apis\Providers\Kuvera\Model\GetFundSchemeDetails200ResponseInnerNav',
        'last_nav' => '\Apps\Fintech\Packages\Apis\Providers\Kuvera\Model\GetFundSchemeDetails200ResponseInnerNav',
        'jan_31_nav' => 'float',
        'volatility' => 'float',
        'returns' => '\Apps\Fintech\Packages\Apis\Providers\Kuvera\Model\GetFundSchemeDetails200ResponseInnerReturns',
        'start_date' => 'string',
        'face_value' => 'mixed',
        'fund_type' => 'string',
        'fund_category' => 'string',
        'plan' => 'string',
        'expense_ratio' => 'string',
        'expense_ratio_date' => 'string',
        'fund_manager' => 'string',
        'crisil_rating' => 'string',
        'investment_objective' => 'string',
        'portfolio_turnover' => 'mixed',
        'maturity_type' => 'string',
        'aum' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'code' => null,
        'name' => null,
        'short_name' => null,
        'lump_available' => null,
        'sip_available' => null,
        'lump_min' => null,
        'lump_min_additional' => null,
        'lump_max' => null,
        'lump_multiplier' => null,
        'sip_min' => null,
        'sip_max' => null,
        'sip_multiplier' => null,
        'sip_dates' => null,
        'redemption_allowed' => null,
        'redemption_amount_multiple' => null,
        'redemption_amount_minimum' => null,
        'redemption_quantity_multiple' => null,
        'redemption_quantity_minimum' => null,
        'category' => null,
        'lock_in_period' => null,
        'upsizecode_sip_dates' => null,
        'sip_maximum_gap' => null,
        'fund_house' => null,
        'fund_name' => null,
        'short_code' => null,
        'detail_info' => null,
        'isin' => null,
        'direct' => null,
        'switch_allowed' => null,
        'stp_flag' => null,
        'swp_flag' => null,
        'sips' => null,
        'instant' => null,
        'reinvestment' => null,
        'tags' => null,
        'slug' => null,
        'channel_partner_code' => null,
        'tax_period' => null,
        'nav' => null,
        'last_nav' => null,
        'jan_31_nav' => null,
        'volatility' => null,
        'returns' => null,
        'start_date' => null,
        'face_value' => null,
        'fund_type' => null,
        'fund_category' => null,
        'plan' => null,
        'expense_ratio' => null,
        'expense_ratio_date' => null,
        'fund_manager' => null,
        'crisil_rating' => null,
        'investment_objective' => null,
        'portfolio_turnover' => null,
        'maturity_type' => null,
        'aum' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'code' => false,
        'name' => false,
        'short_name' => false,
        'lump_available' => false,
        'sip_available' => false,
        'lump_min' => false,
        'lump_min_additional' => false,
        'lump_max' => false,
        'lump_multiplier' => false,
        'sip_min' => false,
        'sip_max' => false,
        'sip_multiplier' => false,
        'sip_dates' => false,
        'redemption_allowed' => false,
        'redemption_amount_multiple' => false,
        'redemption_amount_minimum' => false,
        'redemption_quantity_multiple' => false,
        'redemption_quantity_minimum' => false,
        'category' => false,
        'lock_in_period' => false,
        'upsizecode_sip_dates' => false,
        'sip_maximum_gap' => false,
        'fund_house' => false,
        'fund_name' => false,
        'short_code' => false,
        'detail_info' => false,
        'isin' => false,
        'direct' => false,
        'switch_allowed' => false,
        'stp_flag' => false,
        'swp_flag' => false,
        'sips' => false,
        'instant' => false,
        'reinvestment' => false,
        'tags' => false,
        'slug' => false,
        'channel_partner_code' => false,
        'tax_period' => false,
        'nav' => false,
        'last_nav' => false,
        'jan_31_nav' => false,
        'volatility' => false,
        'returns' => false,
        'start_date' => false,
        'face_value' => true,
        'fund_type' => false,
        'fund_category' => false,
        'plan' => false,
        'expense_ratio' => false,
        'expense_ratio_date' => false,
        'fund_manager' => false,
        'crisil_rating' => false,
        'investment_objective' => false,
        'portfolio_turnover' => true,
        'maturity_type' => false,
        'aum' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'code' => 'code',
        'name' => 'name',
        'short_name' => 'short_name',
        'lump_available' => 'lump_available',
        'sip_available' => 'sip_available',
        'lump_min' => 'lump_min',
        'lump_min_additional' => 'lump_min_additional',
        'lump_max' => 'lump_max',
        'lump_multiplier' => 'lump_multiplier',
        'sip_min' => 'sip_min',
        'sip_max' => 'sip_max',
        'sip_multiplier' => 'sip_multiplier',
        'sip_dates' => 'sip_dates',
        'redemption_allowed' => 'redemption_allowed',
        'redemption_amount_multiple' => 'redemption_amount_multiple',
        'redemption_amount_minimum' => 'redemption_amount_minimum',
        'redemption_quantity_multiple' => 'redemption_quantity_multiple',
        'redemption_quantity_minimum' => 'redemption_quantity_minimum',
        'category' => 'category',
        'lock_in_period' => 'lock_in_period',
        'upsizecode_sip_dates' => 'upsizecode_sip_dates',
        'sip_maximum_gap' => 'sip_maximum_gap',
        'fund_house' => 'fund_house',
        'fund_name' => 'fund_name',
        'short_code' => 'short_code',
        'detail_info' => 'detail_info',
        'isin' => 'ISIN',
        'direct' => 'direct',
        'switch_allowed' => 'switch_allowed',
        'stp_flag' => 'stp_flag',
        'swp_flag' => 'swp_flag',
        'sips' => 'sips',
        'instant' => 'instant',
        'reinvestment' => 'reinvestment',
        'tags' => 'tags',
        'slug' => 'slug',
        'channel_partner_code' => 'channel_partner_code',
        'tax_period' => 'tax_period',
        'nav' => 'nav',
        'last_nav' => 'last_nav',
        'jan_31_nav' => 'jan_31_nav',
        'volatility' => 'volatility',
        'returns' => 'returns',
        'start_date' => 'start_date',
        'face_value' => 'face_value',
        'fund_type' => 'fund_type',
        'fund_category' => 'fund_category',
        'plan' => 'plan',
        'expense_ratio' => 'expense_ratio',
        'expense_ratio_date' => 'expense_ratio_date',
        'fund_manager' => 'fund_manager',
        'crisil_rating' => 'crisil_rating',
        'investment_objective' => 'investment_objective',
        'portfolio_turnover' => 'portfolio_turnover',
        'maturity_type' => 'maturity_type',
        'aum' => 'aum'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'code' => 'setCode',
        'name' => 'setName',
        'short_name' => 'setShortName',
        'lump_available' => 'setLumpAvailable',
        'sip_available' => 'setSipAvailable',
        'lump_min' => 'setLumpMin',
        'lump_min_additional' => 'setLumpMinAdditional',
        'lump_max' => 'setLumpMax',
        'lump_multiplier' => 'setLumpMultiplier',
        'sip_min' => 'setSipMin',
        'sip_max' => 'setSipMax',
        'sip_multiplier' => 'setSipMultiplier',
        'sip_dates' => 'setSipDates',
        'redemption_allowed' => 'setRedemptionAllowed',
        'redemption_amount_multiple' => 'setRedemptionAmountMultiple',
        'redemption_amount_minimum' => 'setRedemptionAmountMinimum',
        'redemption_quantity_multiple' => 'setRedemptionQuantityMultiple',
        'redemption_quantity_minimum' => 'setRedemptionQuantityMinimum',
        'category' => 'setCategory',
        'lock_in_period' => 'setLockInPeriod',
        'upsizecode_sip_dates' => 'setUpsizecodeSipDates',
        'sip_maximum_gap' => 'setSipMaximumGap',
        'fund_house' => 'setFundHouse',
        'fund_name' => 'setFundName',
        'short_code' => 'setShortCode',
        'detail_info' => 'setDetailInfo',
        'isin' => 'setIsin',
        'direct' => 'setDirect',
        'switch_allowed' => 'setSwitchAllowed',
        'stp_flag' => 'setStpFlag',
        'swp_flag' => 'setSwpFlag',
        'sips' => 'setSips',
        'instant' => 'setInstant',
        'reinvestment' => 'setReinvestment',
        'tags' => 'setTags',
        'slug' => 'setSlug',
        'channel_partner_code' => 'setChannelPartnerCode',
        'tax_period' => 'setTaxPeriod',
        'nav' => 'setNav',
        'last_nav' => 'setLastNav',
        'jan_31_nav' => 'setJan31Nav',
        'volatility' => 'setVolatility',
        'returns' => 'setReturns',
        'start_date' => 'setStartDate',
        'face_value' => 'setFaceValue',
        'fund_type' => 'setFundType',
        'fund_category' => 'setFundCategory',
        'plan' => 'setPlan',
        'expense_ratio' => 'setExpenseRatio',
        'expense_ratio_date' => 'setExpenseRatioDate',
        'fund_manager' => 'setFundManager',
        'crisil_rating' => 'setCrisilRating',
        'investment_objective' => 'setInvestmentObjective',
        'portfolio_turnover' => 'setPortfolioTurnover',
        'maturity_type' => 'setMaturityType',
        'aum' => 'setAum'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'code' => 'getCode',
        'name' => 'getName',
        'short_name' => 'getShortName',
        'lump_available' => 'getLumpAvailable',
        'sip_available' => 'getSipAvailable',
        'lump_min' => 'getLumpMin',
        'lump_min_additional' => 'getLumpMinAdditional',
        'lump_max' => 'getLumpMax',
        'lump_multiplier' => 'getLumpMultiplier',
        'sip_min' => 'getSipMin',
        'sip_max' => 'getSipMax',
        'sip_multiplier' => 'getSipMultiplier',
        'sip_dates' => 'getSipDates',
        'redemption_allowed' => 'getRedemptionAllowed',
        'redemption_amount_multiple' => 'getRedemptionAmountMultiple',
        'redemption_amount_minimum' => 'getRedemptionAmountMinimum',
        'redemption_quantity_multiple' => 'getRedemptionQuantityMultiple',
        'redemption_quantity_minimum' => 'getRedemptionQuantityMinimum',
        'category' => 'getCategory',
        'lock_in_period' => 'getLockInPeriod',
        'upsizecode_sip_dates' => 'getUpsizecodeSipDates',
        'sip_maximum_gap' => 'getSipMaximumGap',
        'fund_house' => 'getFundHouse',
        'fund_name' => 'getFundName',
        'short_code' => 'getShortCode',
        'detail_info' => 'getDetailInfo',
        'isin' => 'getIsin',
        'direct' => 'getDirect',
        'switch_allowed' => 'getSwitchAllowed',
        'stp_flag' => 'getStpFlag',
        'swp_flag' => 'getSwpFlag',
        'sips' => 'getSips',
        'instant' => 'getInstant',
        'reinvestment' => 'getReinvestment',
        'tags' => 'getTags',
        'slug' => 'getSlug',
        'channel_partner_code' => 'getChannelPartnerCode',
        'tax_period' => 'getTaxPeriod',
        'nav' => 'getNav',
        'last_nav' => 'getLastNav',
        'jan_31_nav' => 'getJan31Nav',
        'volatility' => 'getVolatility',
        'returns' => 'getReturns',
        'start_date' => 'getStartDate',
        'face_value' => 'getFaceValue',
        'fund_type' => 'getFundType',
        'fund_category' => 'getFundCategory',
        'plan' => 'getPlan',
        'expense_ratio' => 'getExpenseRatio',
        'expense_ratio_date' => 'getExpenseRatioDate',
        'fund_manager' => 'getFundManager',
        'crisil_rating' => 'getCrisilRating',
        'investment_objective' => 'getInvestmentObjective',
        'portfolio_turnover' => 'getPortfolioTurnover',
        'maturity_type' => 'getMaturityType',
        'aum' => 'getAum'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('code', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('short_name', $data ?? [], null);
        $this->setIfExists('lump_available', $data ?? [], null);
        $this->setIfExists('sip_available', $data ?? [], null);
        $this->setIfExists('lump_min', $data ?? [], null);
        $this->setIfExists('lump_min_additional', $data ?? [], null);
        $this->setIfExists('lump_max', $data ?? [], null);
        $this->setIfExists('lump_multiplier', $data ?? [], null);
        $this->setIfExists('sip_min', $data ?? [], null);
        $this->setIfExists('sip_max', $data ?? [], null);
        $this->setIfExists('sip_multiplier', $data ?? [], null);
        $this->setIfExists('sip_dates', $data ?? [], null);
        $this->setIfExists('redemption_allowed', $data ?? [], null);
        $this->setIfExists('redemption_amount_multiple', $data ?? [], null);
        $this->setIfExists('redemption_amount_minimum', $data ?? [], null);
        $this->setIfExists('redemption_quantity_multiple', $data ?? [], null);
        $this->setIfExists('redemption_quantity_minimum', $data ?? [], null);
        $this->setIfExists('category', $data ?? [], null);
        $this->setIfExists('lock_in_period', $data ?? [], null);
        $this->setIfExists('upsizecode_sip_dates', $data ?? [], null);
        $this->setIfExists('sip_maximum_gap', $data ?? [], null);
        $this->setIfExists('fund_house', $data ?? [], null);
        $this->setIfExists('fund_name', $data ?? [], null);
        $this->setIfExists('short_code', $data ?? [], null);
        $this->setIfExists('detail_info', $data ?? [], null);
        $this->setIfExists('isin', $data ?? [], null);
        $this->setIfExists('direct', $data ?? [], null);
        $this->setIfExists('switch_allowed', $data ?? [], null);
        $this->setIfExists('stp_flag', $data ?? [], null);
        $this->setIfExists('swp_flag', $data ?? [], null);
        $this->setIfExists('sips', $data ?? [], null);
        $this->setIfExists('instant', $data ?? [], null);
        $this->setIfExists('reinvestment', $data ?? [], null);
        $this->setIfExists('tags', $data ?? [], null);
        $this->setIfExists('slug', $data ?? [], null);
        $this->setIfExists('channel_partner_code', $data ?? [], null);
        $this->setIfExists('tax_period', $data ?? [], null);
        $this->setIfExists('nav', $data ?? [], null);
        $this->setIfExists('last_nav', $data ?? [], null);
        $this->setIfExists('jan_31_nav', $data ?? [], null);
        $this->setIfExists('volatility', $data ?? [], null);
        $this->setIfExists('returns', $data ?? [], null);
        $this->setIfExists('start_date', $data ?? [], null);
        $this->setIfExists('face_value', $data ?? [], null);
        $this->setIfExists('fund_type', $data ?? [], null);
        $this->setIfExists('fund_category', $data ?? [], null);
        $this->setIfExists('plan', $data ?? [], null);
        $this->setIfExists('expense_ratio', $data ?? [], null);
        $this->setIfExists('expense_ratio_date', $data ?? [], null);
        $this->setIfExists('fund_manager', $data ?? [], null);
        $this->setIfExists('crisil_rating', $data ?? [], null);
        $this->setIfExists('investment_objective', $data ?? [], null);
        $this->setIfExists('portfolio_turnover', $data ?? [], null);
        $this->setIfExists('maturity_type', $data ?? [], null);
        $this->setIfExists('aum', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['code'] === null) {
            $invalidProperties[] = "'code' can't be null";
        }
        if ((mb_strlen($this->container['code']) < 1)) {
            $invalidProperties[] = "invalid value for 'code', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ((mb_strlen($this->container['name']) < 1)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['short_name'] === null) {
            $invalidProperties[] = "'short_name' can't be null";
        }
        if ((mb_strlen($this->container['short_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'short_name', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['lump_available'] === null) {
            $invalidProperties[] = "'lump_available' can't be null";
        }
        if ((mb_strlen($this->container['lump_available']) < 1)) {
            $invalidProperties[] = "invalid value for 'lump_available', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['sip_available'] === null) {
            $invalidProperties[] = "'sip_available' can't be null";
        }
        if ((mb_strlen($this->container['sip_available']) < 1)) {
            $invalidProperties[] = "invalid value for 'sip_available', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['lump_min'] === null) {
            $invalidProperties[] = "'lump_min' can't be null";
        }
        if ($this->container['lump_min_additional'] === null) {
            $invalidProperties[] = "'lump_min_additional' can't be null";
        }
        if ($this->container['lump_max'] === null) {
            $invalidProperties[] = "'lump_max' can't be null";
        }
        if ($this->container['lump_multiplier'] === null) {
            $invalidProperties[] = "'lump_multiplier' can't be null";
        }
        if ($this->container['sip_min'] === null) {
            $invalidProperties[] = "'sip_min' can't be null";
        }
        if ($this->container['sip_max'] === null) {
            $invalidProperties[] = "'sip_max' can't be null";
        }
        if ($this->container['sip_multiplier'] === null) {
            $invalidProperties[] = "'sip_multiplier' can't be null";
        }
        if ($this->container['sip_dates'] === null) {
            $invalidProperties[] = "'sip_dates' can't be null";
        }
        if ($this->container['redemption_allowed'] === null) {
            $invalidProperties[] = "'redemption_allowed' can't be null";
        }
        if ((mb_strlen($this->container['redemption_allowed']) < 1)) {
            $invalidProperties[] = "invalid value for 'redemption_allowed', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['redemption_amount_multiple'] === null) {
            $invalidProperties[] = "'redemption_amount_multiple' can't be null";
        }
        if ($this->container['redemption_amount_minimum'] === null) {
            $invalidProperties[] = "'redemption_amount_minimum' can't be null";
        }
        if ($this->container['redemption_quantity_multiple'] === null) {
            $invalidProperties[] = "'redemption_quantity_multiple' can't be null";
        }
        if ($this->container['redemption_quantity_minimum'] === null) {
            $invalidProperties[] = "'redemption_quantity_minimum' can't be null";
        }
        if ($this->container['category'] === null) {
            $invalidProperties[] = "'category' can't be null";
        }
        if ((mb_strlen($this->container['category']) < 1)) {
            $invalidProperties[] = "invalid value for 'category', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['lock_in_period'] === null) {
            $invalidProperties[] = "'lock_in_period' can't be null";
        }
        if ($this->container['upsizecode_sip_dates'] === null) {
            $invalidProperties[] = "'upsizecode_sip_dates' can't be null";
        }
        if ($this->container['sip_maximum_gap'] === null) {
            $invalidProperties[] = "'sip_maximum_gap' can't be null";
        }
        if ($this->container['fund_house'] === null) {
            $invalidProperties[] = "'fund_house' can't be null";
        }
        if ((mb_strlen($this->container['fund_house']) < 1)) {
            $invalidProperties[] = "invalid value for 'fund_house', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['fund_name'] === null) {
            $invalidProperties[] = "'fund_name' can't be null";
        }
        if ((mb_strlen($this->container['fund_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'fund_name', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['short_code'] === null) {
            $invalidProperties[] = "'short_code' can't be null";
        }
        if ((mb_strlen($this->container['short_code']) < 1)) {
            $invalidProperties[] = "invalid value for 'short_code', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['detail_info'] === null) {
            $invalidProperties[] = "'detail_info' can't be null";
        }
        if ((mb_strlen($this->container['detail_info']) < 1)) {
            $invalidProperties[] = "invalid value for 'detail_info', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['isin'] === null) {
            $invalidProperties[] = "'isin' can't be null";
        }
        if ((mb_strlen($this->container['isin']) < 1)) {
            $invalidProperties[] = "invalid value for 'isin', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['direct'] === null) {
            $invalidProperties[] = "'direct' can't be null";
        }
        if ((mb_strlen($this->container['direct']) < 1)) {
            $invalidProperties[] = "invalid value for 'direct', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['switch_allowed'] === null) {
            $invalidProperties[] = "'switch_allowed' can't be null";
        }
        if ((mb_strlen($this->container['switch_allowed']) < 1)) {
            $invalidProperties[] = "invalid value for 'switch_allowed', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['stp_flag'] === null) {
            $invalidProperties[] = "'stp_flag' can't be null";
        }
        if ((mb_strlen($this->container['stp_flag']) < 1)) {
            $invalidProperties[] = "invalid value for 'stp_flag', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['swp_flag'] === null) {
            $invalidProperties[] = "'swp_flag' can't be null";
        }
        if ((mb_strlen($this->container['swp_flag']) < 1)) {
            $invalidProperties[] = "invalid value for 'swp_flag', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['sips'] === null) {
            $invalidProperties[] = "'sips' can't be null";
        }
        if ($this->container['instant'] === null) {
            $invalidProperties[] = "'instant' can't be null";
        }
        if ((mb_strlen($this->container['instant']) < 1)) {
            $invalidProperties[] = "invalid value for 'instant', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['reinvestment'] === null) {
            $invalidProperties[] = "'reinvestment' can't be null";
        }
        if ((mb_strlen($this->container['reinvestment']) < 1)) {
            $invalidProperties[] = "invalid value for 'reinvestment', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['tags'] === null) {
            $invalidProperties[] = "'tags' can't be null";
        }
        if ($this->container['slug'] === null) {
            $invalidProperties[] = "'slug' can't be null";
        }
        if ((mb_strlen($this->container['slug']) < 1)) {
            $invalidProperties[] = "invalid value for 'slug', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['channel_partner_code'] === null) {
            $invalidProperties[] = "'channel_partner_code' can't be null";
        }
        if ((mb_strlen($this->container['channel_partner_code']) < 1)) {
            $invalidProperties[] = "invalid value for 'channel_partner_code', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['tax_period'] === null) {
            $invalidProperties[] = "'tax_period' can't be null";
        }
        if ($this->container['nav'] === null) {
            $invalidProperties[] = "'nav' can't be null";
        }
        if ($this->container['last_nav'] === null) {
            $invalidProperties[] = "'last_nav' can't be null";
        }
        if ($this->container['jan_31_nav'] === null) {
            $invalidProperties[] = "'jan_31_nav' can't be null";
        }
        if ($this->container['volatility'] === null) {
            $invalidProperties[] = "'volatility' can't be null";
        }
        if ($this->container['returns'] === null) {
            $invalidProperties[] = "'returns' can't be null";
        }
        if ($this->container['start_date'] === null) {
            $invalidProperties[] = "'start_date' can't be null";
        }
        if ((mb_strlen($this->container['start_date']) < 1)) {
            $invalidProperties[] = "invalid value for 'start_date', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['fund_type'] === null) {
            $invalidProperties[] = "'fund_type' can't be null";
        }
        if ((mb_strlen($this->container['fund_type']) < 1)) {
            $invalidProperties[] = "invalid value for 'fund_type', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['fund_category'] === null) {
            $invalidProperties[] = "'fund_category' can't be null";
        }
        if ((mb_strlen($this->container['fund_category']) < 1)) {
            $invalidProperties[] = "invalid value for 'fund_category', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['plan'] === null) {
            $invalidProperties[] = "'plan' can't be null";
        }
        if ((mb_strlen($this->container['plan']) < 1)) {
            $invalidProperties[] = "invalid value for 'plan', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['expense_ratio'] === null) {
            $invalidProperties[] = "'expense_ratio' can't be null";
        }
        if ((mb_strlen($this->container['expense_ratio']) < 1)) {
            $invalidProperties[] = "invalid value for 'expense_ratio', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['expense_ratio_date'] === null) {
            $invalidProperties[] = "'expense_ratio_date' can't be null";
        }
        if ((mb_strlen($this->container['expense_ratio_date']) < 1)) {
            $invalidProperties[] = "invalid value for 'expense_ratio_date', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['fund_manager'] === null) {
            $invalidProperties[] = "'fund_manager' can't be null";
        }
        if ((mb_strlen($this->container['fund_manager']) < 1)) {
            $invalidProperties[] = "invalid value for 'fund_manager', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['crisil_rating'] === null) {
            $invalidProperties[] = "'crisil_rating' can't be null";
        }
        if ((mb_strlen($this->container['crisil_rating']) < 1)) {
            $invalidProperties[] = "invalid value for 'crisil_rating', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['investment_objective'] === null) {
            $invalidProperties[] = "'investment_objective' can't be null";
        }
        if ((mb_strlen($this->container['investment_objective']) < 1)) {
            $invalidProperties[] = "invalid value for 'investment_objective', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['maturity_type'] === null) {
            $invalidProperties[] = "'maturity_type' can't be null";
        }
        if ((mb_strlen($this->container['maturity_type']) < 1)) {
            $invalidProperties[] = "invalid value for 'maturity_type', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['aum'] === null) {
            $invalidProperties[] = "'aum' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code code
     *
     * @return self
     */
    public function setCode($code)
    {
        if (is_null($code)) {
            throw new \InvalidArgumentException('non-nullable code cannot be null');
        }

        if ((mb_strlen($code) < 1)) {
            throw new \InvalidArgumentException('invalid length for $code when calling GetFundSchemeDetails200ResponseInner., must be bigger than or equal to 1.');
        }

        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }

        if ((mb_strlen($name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $name when calling GetFundSchemeDetails200ResponseInner., must be bigger than or equal to 1.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets short_name
     *
     * @return string
     */
    public function getShortName()
    {
        return $this->container['short_name'];
    }

    /**
     * Sets short_name
     *
     * @param string $short_name short_name
     *
     * @return self
     */
    public function setShortName($short_name)
    {
        if (is_null($short_name)) {
            throw new \InvalidArgumentException('non-nullable short_name cannot be null');
        }

        if ((mb_strlen($short_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $short_name when calling GetFundSchemeDetails200ResponseInner., must be bigger than or equal to 1.');
        }

        $this->container['short_name'] = $short_name;

        return $this;
    }

    /**
     * Gets lump_available
     *
     * @return string
     */
    public function getLumpAvailable()
    {
        return $this->container['lump_available'];
    }

    /**
     * Sets lump_available
     *
     * @param string $lump_available lump_available
     *
     * @return self
     */
    public function setLumpAvailable($lump_available)
    {
        if (is_null($lump_available)) {
            throw new \InvalidArgumentException('non-nullable lump_available cannot be null');
        }

        if ((mb_strlen($lump_available) < 1)) {
            throw new \InvalidArgumentException('invalid length for $lump_available when calling GetFundSchemeDetails200ResponseInner., must be bigger than or equal to 1.');
        }

        $this->container['lump_available'] = $lump_available;

        return $this;
    }

    /**
     * Gets sip_available
     *
     * @return string
     */
    public function getSipAvailable()
    {
        return $this->container['sip_available'];
    }

    /**
     * Sets sip_available
     *
     * @param string $sip_available sip_available
     *
     * @return self
     */
    public function setSipAvailable($sip_available)
    {
        if (is_null($sip_available)) {
            throw new \InvalidArgumentException('non-nullable sip_available cannot be null');
        }

        if ((mb_strlen($sip_available) < 1)) {
            throw new \InvalidArgumentException('invalid length for $sip_available when calling GetFundSchemeDetails200ResponseInner., must be bigger than or equal to 1.');
        }

        $this->container['sip_available'] = $sip_available;

        return $this;
    }

    /**
     * Gets lump_min
     *
     * @return float
     */
    public function getLumpMin()
    {
        return $this->container['lump_min'];
    }

    /**
     * Sets lump_min
     *
     * @param float $lump_min lump_min
     *
     * @return self
     */
    public function setLumpMin($lump_min)
    {
        if (is_null($lump_min)) {
            throw new \InvalidArgumentException('non-nullable lump_min cannot be null');
        }
        $this->container['lump_min'] = $lump_min;

        return $this;
    }

    /**
     * Gets lump_min_additional
     *
     * @return float
     */
    public function getLumpMinAdditional()
    {
        return $this->container['lump_min_additional'];
    }

    /**
     * Sets lump_min_additional
     *
     * @param float $lump_min_additional lump_min_additional
     *
     * @return self
     */
    public function setLumpMinAdditional($lump_min_additional)
    {
        if (is_null($lump_min_additional)) {
            throw new \InvalidArgumentException('non-nullable lump_min_additional cannot be null');
        }
        $this->container['lump_min_additional'] = $lump_min_additional;

        return $this;
    }

    /**
     * Gets lump_max
     *
     * @return float
     */
    public function getLumpMax()
    {
        return $this->container['lump_max'];
    }

    /**
     * Sets lump_max
     *
     * @param float $lump_max lump_max
     *
     * @return self
     */
    public function setLumpMax($lump_max)
    {
        if (is_null($lump_max)) {
            throw new \InvalidArgumentException('non-nullable lump_max cannot be null');
        }
        $this->container['lump_max'] = $lump_max;

        return $this;
    }

    /**
     * Gets lump_multiplier
     *
     * @return float
     */
    public function getLumpMultiplier()
    {
        return $this->container['lump_multiplier'];
    }

    /**
     * Sets lump_multiplier
     *
     * @param float $lump_multiplier lump_multiplier
     *
     * @return self
     */
    public function setLumpMultiplier($lump_multiplier)
    {
        if (is_null($lump_multiplier)) {
            throw new \InvalidArgumentException('non-nullable lump_multiplier cannot be null');
        }
        $this->container['lump_multiplier'] = $lump_multiplier;

        return $this;
    }

    /**
     * Gets sip_min
     *
     * @return float
     */
    public function getSipMin()
    {
        return $this->container['sip_min'];
    }

    /**
     * Sets sip_min
     *
     * @param float $sip_min sip_min
     *
     * @return self
     */
    public function setSipMin($sip_min)
    {
        if (is_null($sip_min)) {
            throw new \InvalidArgumentException('non-nullable sip_min cannot be null');
        }
        $this->container['sip_min'] = $sip_min;

        return $this;
    }

    /**
     * Gets sip_max
     *
     * @return float
     */
    public function getSipMax()
    {
        return $this->container['sip_max'];
    }

    /**
     * Sets sip_max
     *
     * @param float $sip_max sip_max
     *
     * @return self
     */
    public function setSipMax($sip_max)
    {
        if (is_null($sip_max)) {
            throw new \InvalidArgumentException('non-nullable sip_max cannot be null');
        }
        $this->container['sip_max'] = $sip_max;

        return $this;
    }

    /**
     * Gets sip_multiplier
     *
     * @return float
     */
    public function getSipMultiplier()
    {
        return $this->container['sip_multiplier'];
    }

    /**
     * Sets sip_multiplier
     *
     * @param float $sip_multiplier sip_multiplier
     *
     * @return self
     */
    public function setSipMultiplier($sip_multiplier)
    {
        if (is_null($sip_multiplier)) {
            throw new \InvalidArgumentException('non-nullable sip_multiplier cannot be null');
        }
        $this->container['sip_multiplier'] = $sip_multiplier;

        return $this;
    }

    /**
     * Gets sip_dates
     *
     * @return mixed[]
     */
    public function getSipDates()
    {
        return $this->container['sip_dates'];
    }

    /**
     * Sets sip_dates
     *
     * @param mixed[] $sip_dates sip_dates
     *
     * @return self
     */
    public function setSipDates($sip_dates)
    {
        if (is_null($sip_dates)) {
            throw new \InvalidArgumentException('non-nullable sip_dates cannot be null');
        }
        $this->container['sip_dates'] = $sip_dates;

        return $this;
    }

    /**
     * Gets redemption_allowed
     *
     * @return string
     */
    public function getRedemptionAllowed()
    {
        return $this->container['redemption_allowed'];
    }

    /**
     * Sets redemption_allowed
     *
     * @param string $redemption_allowed redemption_allowed
     *
     * @return self
     */
    public function setRedemptionAllowed($redemption_allowed)
    {
        if (is_null($redemption_allowed)) {
            throw new \InvalidArgumentException('non-nullable redemption_allowed cannot be null');
        }

        if ((mb_strlen($redemption_allowed) < 1)) {
            throw new \InvalidArgumentException('invalid length for $redemption_allowed when calling GetFundSchemeDetails200ResponseInner., must be bigger than or equal to 1.');
        }

        $this->container['redemption_allowed'] = $redemption_allowed;

        return $this;
    }

    /**
     * Gets redemption_amount_multiple
     *
     * @return float
     */
    public function getRedemptionAmountMultiple()
    {
        return $this->container['redemption_amount_multiple'];
    }

    /**
     * Sets redemption_amount_multiple
     *
     * @param float $redemption_amount_multiple redemption_amount_multiple
     *
     * @return self
     */
    public function setRedemptionAmountMultiple($redemption_amount_multiple)
    {
        if (is_null($redemption_amount_multiple)) {
            throw new \InvalidArgumentException('non-nullable redemption_amount_multiple cannot be null');
        }
        $this->container['redemption_amount_multiple'] = $redemption_amount_multiple;

        return $this;
    }

    /**
     * Gets redemption_amount_minimum
     *
     * @return float
     */
    public function getRedemptionAmountMinimum()
    {
        return $this->container['redemption_amount_minimum'];
    }

    /**
     * Sets redemption_amount_minimum
     *
     * @param float $redemption_amount_minimum redemption_amount_minimum
     *
     * @return self
     */
    public function setRedemptionAmountMinimum($redemption_amount_minimum)
    {
        if (is_null($redemption_amount_minimum)) {
            throw new \InvalidArgumentException('non-nullable redemption_amount_minimum cannot be null');
        }
        $this->container['redemption_amount_minimum'] = $redemption_amount_minimum;

        return $this;
    }

    /**
     * Gets redemption_quantity_multiple
     *
     * @return float
     */
    public function getRedemptionQuantityMultiple()
    {
        return $this->container['redemption_quantity_multiple'];
    }

    /**
     * Sets redemption_quantity_multiple
     *
     * @param float $redemption_quantity_multiple redemption_quantity_multiple
     *
     * @return self
     */
    public function setRedemptionQuantityMultiple($redemption_quantity_multiple)
    {
        if (is_null($redemption_quantity_multiple)) {
            throw new \InvalidArgumentException('non-nullable redemption_quantity_multiple cannot be null');
        }
        $this->container['redemption_quantity_multiple'] = $redemption_quantity_multiple;

        return $this;
    }

    /**
     * Gets redemption_quantity_minimum
     *
     * @return float
     */
    public function getRedemptionQuantityMinimum()
    {
        return $this->container['redemption_quantity_minimum'];
    }

    /**
     * Sets redemption_quantity_minimum
     *
     * @param float $redemption_quantity_minimum redemption_quantity_minimum
     *
     * @return self
     */
    public function setRedemptionQuantityMinimum($redemption_quantity_minimum)
    {
        if (is_null($redemption_quantity_minimum)) {
            throw new \InvalidArgumentException('non-nullable redemption_quantity_minimum cannot be null');
        }
        $this->container['redemption_quantity_minimum'] = $redemption_quantity_minimum;

        return $this;
    }

    /**
     * Gets category
     *
     * @return string
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param string $category category
     *
     * @return self
     */
    public function setCategory($category)
    {
        if (is_null($category)) {
            throw new \InvalidArgumentException('non-nullable category cannot be null');
        }

        if ((mb_strlen($category) < 1)) {
            throw new \InvalidArgumentException('invalid length for $category when calling GetFundSchemeDetails200ResponseInner., must be bigger than or equal to 1.');
        }

        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets lock_in_period
     *
     * @return float
     */
    public function getLockInPeriod()
    {
        return $this->container['lock_in_period'];
    }

    /**
     * Sets lock_in_period
     *
     * @param float $lock_in_period lock_in_period
     *
     * @return self
     */
    public function setLockInPeriod($lock_in_period)
    {
        if (is_null($lock_in_period)) {
            throw new \InvalidArgumentException('non-nullable lock_in_period cannot be null');
        }
        $this->container['lock_in_period'] = $lock_in_period;

        return $this;
    }

    /**
     * Gets upsizecode_sip_dates
     *
     * @return mixed[]
     */
    public function getUpsizecodeSipDates()
    {
        return $this->container['upsizecode_sip_dates'];
    }

    /**
     * Sets upsizecode_sip_dates
     *
     * @param mixed[] $upsizecode_sip_dates upsizecode_sip_dates
     *
     * @return self
     */
    public function setUpsizecodeSipDates($upsizecode_sip_dates)
    {
        if (is_null($upsizecode_sip_dates)) {
            throw new \InvalidArgumentException('non-nullable upsizecode_sip_dates cannot be null');
        }
        $this->container['upsizecode_sip_dates'] = $upsizecode_sip_dates;

        return $this;
    }

    /**
     * Gets sip_maximum_gap
     *
     * @return float
     */
    public function getSipMaximumGap()
    {
        return $this->container['sip_maximum_gap'];
    }

    /**
     * Sets sip_maximum_gap
     *
     * @param float $sip_maximum_gap sip_maximum_gap
     *
     * @return self
     */
    public function setSipMaximumGap($sip_maximum_gap)
    {
        if (is_null($sip_maximum_gap)) {
            throw new \InvalidArgumentException('non-nullable sip_maximum_gap cannot be null');
        }
        $this->container['sip_maximum_gap'] = $sip_maximum_gap;

        return $this;
    }

    /**
     * Gets fund_house
     *
     * @return string
     */
    public function getFundHouse()
    {
        return $this->container['fund_house'];
    }

    /**
     * Sets fund_house
     *
     * @param string $fund_house fund_house
     *
     * @return self
     */
    public function setFundHouse($fund_house)
    {
        if (is_null($fund_house)) {
            throw new \InvalidArgumentException('non-nullable fund_house cannot be null');
        }

        if ((mb_strlen($fund_house) < 1)) {
            throw new \InvalidArgumentException('invalid length for $fund_house when calling GetFundSchemeDetails200ResponseInner., must be bigger than or equal to 1.');
        }

        $this->container['fund_house'] = $fund_house;

        return $this;
    }

    /**
     * Gets fund_name
     *
     * @return string
     */
    public function getFundName()
    {
        return $this->container['fund_name'];
    }

    /**
     * Sets fund_name
     *
     * @param string $fund_name fund_name
     *
     * @return self
     */
    public function setFundName($fund_name)
    {
        if (is_null($fund_name)) {
            throw new \InvalidArgumentException('non-nullable fund_name cannot be null');
        }

        if ((mb_strlen($fund_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $fund_name when calling GetFundSchemeDetails200ResponseInner., must be bigger than or equal to 1.');
        }

        $this->container['fund_name'] = $fund_name;

        return $this;
    }

    /**
     * Gets short_code
     *
     * @return string
     */
    public function getShortCode()
    {
        return $this->container['short_code'];
    }

    /**
     * Sets short_code
     *
     * @param string $short_code short_code
     *
     * @return self
     */
    public function setShortCode($short_code)
    {
        if (is_null($short_code)) {
            throw new \InvalidArgumentException('non-nullable short_code cannot be null');
        }

        if ((mb_strlen($short_code) < 1)) {
            throw new \InvalidArgumentException('invalid length for $short_code when calling GetFundSchemeDetails200ResponseInner., must be bigger than or equal to 1.');
        }

        $this->container['short_code'] = $short_code;

        return $this;
    }

    /**
     * Gets detail_info
     *
     * @return string
     */
    public function getDetailInfo()
    {
        return $this->container['detail_info'];
    }

    /**
     * Sets detail_info
     *
     * @param string $detail_info detail_info
     *
     * @return self
     */
    public function setDetailInfo($detail_info)
    {
        if (is_null($detail_info)) {
            throw new \InvalidArgumentException('non-nullable detail_info cannot be null');
        }

        if ((mb_strlen($detail_info) < 1)) {
            throw new \InvalidArgumentException('invalid length for $detail_info when calling GetFundSchemeDetails200ResponseInner., must be bigger than or equal to 1.');
        }

        $this->container['detail_info'] = $detail_info;

        return $this;
    }

    /**
     * Gets isin
     *
     * @return string
     */
    public function getIsin()
    {
        return $this->container['isin'];
    }

    /**
     * Sets isin
     *
     * @param string $isin isin
     *
     * @return self
     */
    public function setIsin($isin)
    {
        if (is_null($isin)) {
            throw new \InvalidArgumentException('non-nullable isin cannot be null');
        }

        if ((mb_strlen($isin) < 1)) {
            throw new \InvalidArgumentException('invalid length for $isin when calling GetFundSchemeDetails200ResponseInner., must be bigger than or equal to 1.');
        }

        $this->container['isin'] = $isin;

        return $this;
    }

    /**
     * Gets direct
     *
     * @return string
     */
    public function getDirect()
    {
        return $this->container['direct'];
    }

    /**
     * Sets direct
     *
     * @param string $direct direct
     *
     * @return self
     */
    public function setDirect($direct)
    {
        if (is_null($direct)) {
            throw new \InvalidArgumentException('non-nullable direct cannot be null');
        }

        if ((mb_strlen($direct) < 1)) {
            throw new \InvalidArgumentException('invalid length for $direct when calling GetFundSchemeDetails200ResponseInner., must be bigger than or equal to 1.');
        }

        $this->container['direct'] = $direct;

        return $this;
    }

    /**
     * Gets switch_allowed
     *
     * @return string
     */
    public function getSwitchAllowed()
    {
        return $this->container['switch_allowed'];
    }

    /**
     * Sets switch_allowed
     *
     * @param string $switch_allowed switch_allowed
     *
     * @return self
     */
    public function setSwitchAllowed($switch_allowed)
    {
        if (is_null($switch_allowed)) {
            throw new \InvalidArgumentException('non-nullable switch_allowed cannot be null');
        }

        if ((mb_strlen($switch_allowed) < 1)) {
            throw new \InvalidArgumentException('invalid length for $switch_allowed when calling GetFundSchemeDetails200ResponseInner., must be bigger than or equal to 1.');
        }

        $this->container['switch_allowed'] = $switch_allowed;

        return $this;
    }

    /**
     * Gets stp_flag
     *
     * @return string
     */
    public function getStpFlag()
    {
        return $this->container['stp_flag'];
    }

    /**
     * Sets stp_flag
     *
     * @param string $stp_flag stp_flag
     *
     * @return self
     */
    public function setStpFlag($stp_flag)
    {
        if (is_null($stp_flag)) {
            throw new \InvalidArgumentException('non-nullable stp_flag cannot be null');
        }

        if ((mb_strlen($stp_flag) < 1)) {
            throw new \InvalidArgumentException('invalid length for $stp_flag when calling GetFundSchemeDetails200ResponseInner., must be bigger than or equal to 1.');
        }

        $this->container['stp_flag'] = $stp_flag;

        return $this;
    }

    /**
     * Gets swp_flag
     *
     * @return string
     */
    public function getSwpFlag()
    {
        return $this->container['swp_flag'];
    }

    /**
     * Sets swp_flag
     *
     * @param string $swp_flag swp_flag
     *
     * @return self
     */
    public function setSwpFlag($swp_flag)
    {
        if (is_null($swp_flag)) {
            throw new \InvalidArgumentException('non-nullable swp_flag cannot be null');
        }

        if ((mb_strlen($swp_flag) < 1)) {
            throw new \InvalidArgumentException('invalid length for $swp_flag when calling GetFundSchemeDetails200ResponseInner., must be bigger than or equal to 1.');
        }

        $this->container['swp_flag'] = $swp_flag;

        return $this;
    }

    /**
     * Gets sips
     *
     * @return mixed[]
     */
    public function getSips()
    {
        return $this->container['sips'];
    }

    /**
     * Sets sips
     *
     * @param mixed[] $sips sips
     *
     * @return self
     */
    public function setSips($sips)
    {
        if (is_null($sips)) {
            throw new \InvalidArgumentException('non-nullable sips cannot be null');
        }
        $this->container['sips'] = $sips;

        return $this;
    }

    /**
     * Gets instant
     *
     * @return string
     */
    public function getInstant()
    {
        return $this->container['instant'];
    }

    /**
     * Sets instant
     *
     * @param string $instant instant
     *
     * @return self
     */
    public function setInstant($instant)
    {
        if (is_null($instant)) {
            throw new \InvalidArgumentException('non-nullable instant cannot be null');
        }

        if ((mb_strlen($instant) < 1)) {
            throw new \InvalidArgumentException('invalid length for $instant when calling GetFundSchemeDetails200ResponseInner., must be bigger than or equal to 1.');
        }

        $this->container['instant'] = $instant;

        return $this;
    }

    /**
     * Gets reinvestment
     *
     * @return string
     */
    public function getReinvestment()
    {
        return $this->container['reinvestment'];
    }

    /**
     * Sets reinvestment
     *
     * @param string $reinvestment reinvestment
     *
     * @return self
     */
    public function setReinvestment($reinvestment)
    {
        if (is_null($reinvestment)) {
            throw new \InvalidArgumentException('non-nullable reinvestment cannot be null');
        }

        if ((mb_strlen($reinvestment) < 1)) {
            throw new \InvalidArgumentException('invalid length for $reinvestment when calling GetFundSchemeDetails200ResponseInner., must be bigger than or equal to 1.');
        }

        $this->container['reinvestment'] = $reinvestment;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return mixed[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param mixed[] $tags tags
     *
     * @return self
     */
    public function setTags($tags)
    {
        if (is_null($tags)) {
            throw new \InvalidArgumentException('non-nullable tags cannot be null');
        }
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets slug
     *
     * @return string
     */
    public function getSlug()
    {
        return $this->container['slug'];
    }

    /**
     * Sets slug
     *
     * @param string $slug slug
     *
     * @return self
     */
    public function setSlug($slug)
    {
        if (is_null($slug)) {
            throw new \InvalidArgumentException('non-nullable slug cannot be null');
        }

        if ((mb_strlen($slug) < 1)) {
            throw new \InvalidArgumentException('invalid length for $slug when calling GetFundSchemeDetails200ResponseInner., must be bigger than or equal to 1.');
        }

        $this->container['slug'] = $slug;

        return $this;
    }

    /**
     * Gets channel_partner_code
     *
     * @return string
     */
    public function getChannelPartnerCode()
    {
        return $this->container['channel_partner_code'];
    }

    /**
     * Sets channel_partner_code
     *
     * @param string $channel_partner_code channel_partner_code
     *
     * @return self
     */
    public function setChannelPartnerCode($channel_partner_code)
    {
        if (is_null($channel_partner_code)) {
            throw new \InvalidArgumentException('non-nullable channel_partner_code cannot be null');
        }

        if ((mb_strlen($channel_partner_code) < 1)) {
            throw new \InvalidArgumentException('invalid length for $channel_partner_code when calling GetFundSchemeDetails200ResponseInner., must be bigger than or equal to 1.');
        }

        $this->container['channel_partner_code'] = $channel_partner_code;

        return $this;
    }

    /**
     * Gets tax_period
     *
     * @return float
     */
    public function getTaxPeriod()
    {
        return $this->container['tax_period'];
    }

    /**
     * Sets tax_period
     *
     * @param float $tax_period tax_period
     *
     * @return self
     */
    public function setTaxPeriod($tax_period)
    {
        if (is_null($tax_period)) {
            throw new \InvalidArgumentException('non-nullable tax_period cannot be null');
        }
        $this->container['tax_period'] = $tax_period;

        return $this;
    }

    /**
     * Gets nav
     *
     * @return \Apps\Fintech\Packages\Apis\Providers\Kuvera\Model\GetFundSchemeDetails200ResponseInnerNav
     */
    public function getNav()
    {
        return $this->container['nav'];
    }

    /**
     * Sets nav
     *
     * @param \Apps\Fintech\Packages\Apis\Providers\Kuvera\Model\GetFundSchemeDetails200ResponseInnerNav $nav nav
     *
     * @return self
     */
    public function setNav($nav)
    {
        if (is_null($nav)) {
            throw new \InvalidArgumentException('non-nullable nav cannot be null');
        }
        $this->container['nav'] = $nav;

        return $this;
    }

    /**
     * Gets last_nav
     *
     * @return \Apps\Fintech\Packages\Apis\Providers\Kuvera\Model\GetFundSchemeDetails200ResponseInnerNav
     */
    public function getLastNav()
    {
        return $this->container['last_nav'];
    }

    /**
     * Sets last_nav
     *
     * @param \Apps\Fintech\Packages\Apis\Providers\Kuvera\Model\GetFundSchemeDetails200ResponseInnerNav $last_nav last_nav
     *
     * @return self
     */
    public function setLastNav($last_nav)
    {
        if (is_null($last_nav)) {
            throw new \InvalidArgumentException('non-nullable last_nav cannot be null');
        }
        $this->container['last_nav'] = $last_nav;

        return $this;
    }

    /**
     * Gets jan_31_nav
     *
     * @return float
     */
    public function getJan31Nav()
    {
        return $this->container['jan_31_nav'];
    }

    /**
     * Sets jan_31_nav
     *
     * @param float $jan_31_nav jan_31_nav
     *
     * @return self
     */
    public function setJan31Nav($jan_31_nav)
    {
        if (is_null($jan_31_nav)) {
            throw new \InvalidArgumentException('non-nullable jan_31_nav cannot be null');
        }
        $this->container['jan_31_nav'] = $jan_31_nav;

        return $this;
    }

    /**
     * Gets volatility
     *
     * @return float
     */
    public function getVolatility()
    {
        return $this->container['volatility'];
    }

    /**
     * Sets volatility
     *
     * @param float $volatility volatility
     *
     * @return self
     */
    public function setVolatility($volatility)
    {
        if (is_null($volatility)) {
            throw new \InvalidArgumentException('non-nullable volatility cannot be null');
        }
        $this->container['volatility'] = $volatility;

        return $this;
    }

    /**
     * Gets returns
     *
     * @return \Apps\Fintech\Packages\Apis\Providers\Kuvera\Model\GetFundSchemeDetails200ResponseInnerReturns
     */
    public function getReturns()
    {
        return $this->container['returns'];
    }

    /**
     * Sets returns
     *
     * @param \Apps\Fintech\Packages\Apis\Providers\Kuvera\Model\GetFundSchemeDetails200ResponseInnerReturns $returns returns
     *
     * @return self
     */
    public function setReturns($returns)
    {
        if (is_null($returns)) {
            throw new \InvalidArgumentException('non-nullable returns cannot be null');
        }
        $this->container['returns'] = $returns;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return string
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param string $start_date start_date
     *
     * @return self
     */
    public function setStartDate($start_date)
    {
        if (is_null($start_date)) {
            throw new \InvalidArgumentException('non-nullable start_date cannot be null');
        }

        if ((mb_strlen($start_date) < 1)) {
            throw new \InvalidArgumentException('invalid length for $start_date when calling GetFundSchemeDetails200ResponseInner., must be bigger than or equal to 1.');
        }

        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets face_value
     *
     * @return mixed|null
     */
    public function getFaceValue()
    {
        return $this->container['face_value'];
    }

    /**
     * Sets face_value
     *
     * @param mixed|null $face_value face_value
     *
     * @return self
     */
    public function setFaceValue($face_value)
    {
        if (is_null($face_value)) {
            array_push($this->openAPINullablesSetToNull, 'face_value');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('face_value', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['face_value'] = $face_value;

        return $this;
    }

    /**
     * Gets fund_type
     *
     * @return string
     */
    public function getFundType()
    {
        return $this->container['fund_type'];
    }

    /**
     * Sets fund_type
     *
     * @param string $fund_type fund_type
     *
     * @return self
     */
    public function setFundType($fund_type)
    {
        if (is_null($fund_type)) {
            throw new \InvalidArgumentException('non-nullable fund_type cannot be null');
        }

        if ((mb_strlen($fund_type) < 1)) {
            throw new \InvalidArgumentException('invalid length for $fund_type when calling GetFundSchemeDetails200ResponseInner., must be bigger than or equal to 1.');
        }

        $this->container['fund_type'] = $fund_type;

        return $this;
    }

    /**
     * Gets fund_category
     *
     * @return string
     */
    public function getFundCategory()
    {
        return $this->container['fund_category'];
    }

    /**
     * Sets fund_category
     *
     * @param string $fund_category fund_category
     *
     * @return self
     */
    public function setFundCategory($fund_category)
    {
        if (is_null($fund_category)) {
            throw new \InvalidArgumentException('non-nullable fund_category cannot be null');
        }

        if ((mb_strlen($fund_category) < 1)) {
            throw new \InvalidArgumentException('invalid length for $fund_category when calling GetFundSchemeDetails200ResponseInner., must be bigger than or equal to 1.');
        }

        $this->container['fund_category'] = $fund_category;

        return $this;
    }

    /**
     * Gets plan
     *
     * @return string
     */
    public function getPlan()
    {
        return $this->container['plan'];
    }

    /**
     * Sets plan
     *
     * @param string $plan plan
     *
     * @return self
     */
    public function setPlan($plan)
    {
        if (is_null($plan)) {
            throw new \InvalidArgumentException('non-nullable plan cannot be null');
        }

        if ((mb_strlen($plan) < 1)) {
            throw new \InvalidArgumentException('invalid length for $plan when calling GetFundSchemeDetails200ResponseInner., must be bigger than or equal to 1.');
        }

        $this->container['plan'] = $plan;

        return $this;
    }

    /**
     * Gets expense_ratio
     *
     * @return string
     */
    public function getExpenseRatio()
    {
        return $this->container['expense_ratio'];
    }

    /**
     * Sets expense_ratio
     *
     * @param string $expense_ratio expense_ratio
     *
     * @return self
     */
    public function setExpenseRatio($expense_ratio)
    {
        if (is_null($expense_ratio)) {
            throw new \InvalidArgumentException('non-nullable expense_ratio cannot be null');
        }

        if ((mb_strlen($expense_ratio) < 1)) {
            throw new \InvalidArgumentException('invalid length for $expense_ratio when calling GetFundSchemeDetails200ResponseInner., must be bigger than or equal to 1.');
        }

        $this->container['expense_ratio'] = $expense_ratio;

        return $this;
    }

    /**
     * Gets expense_ratio_date
     *
     * @return string
     */
    public function getExpenseRatioDate()
    {
        return $this->container['expense_ratio_date'];
    }

    /**
     * Sets expense_ratio_date
     *
     * @param string $expense_ratio_date expense_ratio_date
     *
     * @return self
     */
    public function setExpenseRatioDate($expense_ratio_date)
    {
        if (is_null($expense_ratio_date)) {
            throw new \InvalidArgumentException('non-nullable expense_ratio_date cannot be null');
        }

        if ((mb_strlen($expense_ratio_date) < 1)) {
            throw new \InvalidArgumentException('invalid length for $expense_ratio_date when calling GetFundSchemeDetails200ResponseInner., must be bigger than or equal to 1.');
        }

        $this->container['expense_ratio_date'] = $expense_ratio_date;

        return $this;
    }

    /**
     * Gets fund_manager
     *
     * @return string
     */
    public function getFundManager()
    {
        return $this->container['fund_manager'];
    }

    /**
     * Sets fund_manager
     *
     * @param string $fund_manager fund_manager
     *
     * @return self
     */
    public function setFundManager($fund_manager)
    {
        if (is_null($fund_manager)) {
            throw new \InvalidArgumentException('non-nullable fund_manager cannot be null');
        }

        if ((mb_strlen($fund_manager) < 1)) {
            throw new \InvalidArgumentException('invalid length for $fund_manager when calling GetFundSchemeDetails200ResponseInner., must be bigger than or equal to 1.');
        }

        $this->container['fund_manager'] = $fund_manager;

        return $this;
    }

    /**
     * Gets crisil_rating
     *
     * @return string
     */
    public function getCrisilRating()
    {
        return $this->container['crisil_rating'];
    }

    /**
     * Sets crisil_rating
     *
     * @param string $crisil_rating crisil_rating
     *
     * @return self
     */
    public function setCrisilRating($crisil_rating)
    {
        if (is_null($crisil_rating)) {
            throw new \InvalidArgumentException('non-nullable crisil_rating cannot be null');
        }

        if ((mb_strlen($crisil_rating) < 1)) {
            throw new \InvalidArgumentException('invalid length for $crisil_rating when calling GetFundSchemeDetails200ResponseInner., must be bigger than or equal to 1.');
        }

        $this->container['crisil_rating'] = $crisil_rating;

        return $this;
    }

    /**
     * Gets investment_objective
     *
     * @return string
     */
    public function getInvestmentObjective()
    {
        return $this->container['investment_objective'];
    }

    /**
     * Sets investment_objective
     *
     * @param string $investment_objective investment_objective
     *
     * @return self
     */
    public function setInvestmentObjective($investment_objective)
    {
        if (is_null($investment_objective)) {
            throw new \InvalidArgumentException('non-nullable investment_objective cannot be null');
        }

        if ((mb_strlen($investment_objective) < 1)) {
            throw new \InvalidArgumentException('invalid length for $investment_objective when calling GetFundSchemeDetails200ResponseInner., must be bigger than or equal to 1.');
        }

        $this->container['investment_objective'] = $investment_objective;

        return $this;
    }

    /**
     * Gets portfolio_turnover
     *
     * @return mixed|null
     */
    public function getPortfolioTurnover()
    {
        return $this->container['portfolio_turnover'];
    }

    /**
     * Sets portfolio_turnover
     *
     * @param mixed|null $portfolio_turnover portfolio_turnover
     *
     * @return self
     */
    public function setPortfolioTurnover($portfolio_turnover)
    {
        if (is_null($portfolio_turnover)) {
            array_push($this->openAPINullablesSetToNull, 'portfolio_turnover');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('portfolio_turnover', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['portfolio_turnover'] = $portfolio_turnover;

        return $this;
    }

    /**
     * Gets maturity_type
     *
     * @return string
     */
    public function getMaturityType()
    {
        return $this->container['maturity_type'];
    }

    /**
     * Sets maturity_type
     *
     * @param string $maturity_type maturity_type
     *
     * @return self
     */
    public function setMaturityType($maturity_type)
    {
        if (is_null($maturity_type)) {
            throw new \InvalidArgumentException('non-nullable maturity_type cannot be null');
        }

        if ((mb_strlen($maturity_type) < 1)) {
            throw new \InvalidArgumentException('invalid length for $maturity_type when calling GetFundSchemeDetails200ResponseInner., must be bigger than or equal to 1.');
        }

        $this->container['maturity_type'] = $maturity_type;

        return $this;
    }

    /**
     * Gets aum
     *
     * @return float
     */
    public function getAum()
    {
        return $this->container['aum'];
    }

    /**
     * Sets aum
     *
     * @param float $aum aum
     *
     * @return self
     */
    public function setAum($aum)
    {
        if (is_null($aum)) {
            throw new \InvalidArgumentException('non-nullable aum cannot be null');
        }
        $this->container['aum'] = $aum;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


