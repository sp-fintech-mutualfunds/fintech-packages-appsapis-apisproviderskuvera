<?php
/**
 * GetFixedDepositPlans200ResponseDataInnerAttributes
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Apps\Fintech\Packages\Apis\Providers\Kuvera
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Kuvera
 *
 * Unofficial read API specification for Kuvera.  See Introduction on left to get a summary.
 *
 * The version of the OpenAPI document: 
 * Contact: kuvera.api@captnemo.in
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Apps\Fintech\Packages\Apis\Providers\Kuvera\Model;

use \ArrayAccess;
use \Apps\Fintech\Packages\Apis\Providers\Kuvera\ObjectSerializer;

/**
 * GetFixedDepositPlans200ResponseDataInnerAttributes Class Doc Comment
 *
 * @category Class
 * @description Attributes of the FD Plan
 * @package  Apps\Fintech\Packages\Apis\Providers\Kuvera
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GetFixedDepositPlans200ResponseDataInnerAttributes implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'get_fixed_deposit_plans_200_response_data_inner_attributes';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'risk_level' => 'string',
        'partner_id' => 'string',
        'interest_rate' => 'float',
        'senior_citizen_interest_rate' => 'float',
        'offer_code' => 'mixed',
        'tenure_from' => 'float',
        'tenure_to' => 'float',
        'tenure_from_in_months' => 'float',
        'tenure_to_in_months' => 'float',
        'start_date' => 'mixed',
        'end_date' => 'mixed',
        'min_amount' => 'string',
        'compounding' => 'string',
        'max_amount' => 'string',
        'status' => 'string',
        'lockin_period' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'risk_level' => null,
        'partner_id' => null,
        'interest_rate' => null,
        'senior_citizen_interest_rate' => null,
        'offer_code' => null,
        'tenure_from' => null,
        'tenure_to' => null,
        'tenure_from_in_months' => null,
        'tenure_to_in_months' => null,
        'start_date' => null,
        'end_date' => null,
        'min_amount' => null,
        'compounding' => null,
        'max_amount' => null,
        'status' => null,
        'lockin_period' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'name' => false,
        'risk_level' => false,
        'partner_id' => false,
        'interest_rate' => false,
        'senior_citizen_interest_rate' => false,
        'offer_code' => true,
        'tenure_from' => false,
        'tenure_to' => false,
        'tenure_from_in_months' => false,
        'tenure_to_in_months' => false,
        'start_date' => true,
        'end_date' => true,
        'min_amount' => false,
        'compounding' => false,
        'max_amount' => false,
        'status' => false,
        'lockin_period' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'risk_level' => 'risk_level',
        'partner_id' => 'partner_id',
        'interest_rate' => 'interest_rate',
        'senior_citizen_interest_rate' => 'senior_citizen_interest_rate',
        'offer_code' => 'offer_code',
        'tenure_from' => 'tenure_from',
        'tenure_to' => 'tenure_to',
        'tenure_from_in_months' => 'tenure_from_in_months',
        'tenure_to_in_months' => 'tenure_to_in_months',
        'start_date' => 'start_date',
        'end_date' => 'end_date',
        'min_amount' => 'min_amount',
        'compounding' => 'compounding',
        'max_amount' => 'max_amount',
        'status' => 'status',
        'lockin_period' => 'lockin_period'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'risk_level' => 'setRiskLevel',
        'partner_id' => 'setPartnerId',
        'interest_rate' => 'setInterestRate',
        'senior_citizen_interest_rate' => 'setSeniorCitizenInterestRate',
        'offer_code' => 'setOfferCode',
        'tenure_from' => 'setTenureFrom',
        'tenure_to' => 'setTenureTo',
        'tenure_from_in_months' => 'setTenureFromInMonths',
        'tenure_to_in_months' => 'setTenureToInMonths',
        'start_date' => 'setStartDate',
        'end_date' => 'setEndDate',
        'min_amount' => 'setMinAmount',
        'compounding' => 'setCompounding',
        'max_amount' => 'setMaxAmount',
        'status' => 'setStatus',
        'lockin_period' => 'setLockinPeriod'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'risk_level' => 'getRiskLevel',
        'partner_id' => 'getPartnerId',
        'interest_rate' => 'getInterestRate',
        'senior_citizen_interest_rate' => 'getSeniorCitizenInterestRate',
        'offer_code' => 'getOfferCode',
        'tenure_from' => 'getTenureFrom',
        'tenure_to' => 'getTenureTo',
        'tenure_from_in_months' => 'getTenureFromInMonths',
        'tenure_to_in_months' => 'getTenureToInMonths',
        'start_date' => 'getStartDate',
        'end_date' => 'getEndDate',
        'min_amount' => 'getMinAmount',
        'compounding' => 'getCompounding',
        'max_amount' => 'getMaxAmount',
        'status' => 'getStatus',
        'lockin_period' => 'getLockinPeriod'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const COMPOUNDING_ANNUALLY = 'annually';
    public const COMPOUNDING_MONTHLY = 'monthly';
    public const COMPOUNDING_DAILY = 'daily';
    public const STATUS_REGISTERED = 'registered';
    public const STATUS_ACTIVE = 'active';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCompoundingAllowableValues()
    {
        return [
            self::COMPOUNDING_ANNUALLY,
            self::COMPOUNDING_MONTHLY,
            self::COMPOUNDING_DAILY,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_REGISTERED,
            self::STATUS_ACTIVE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('risk_level', $data ?? [], null);
        $this->setIfExists('partner_id', $data ?? [], null);
        $this->setIfExists('interest_rate', $data ?? [], null);
        $this->setIfExists('senior_citizen_interest_rate', $data ?? [], null);
        $this->setIfExists('offer_code', $data ?? [], null);
        $this->setIfExists('tenure_from', $data ?? [], null);
        $this->setIfExists('tenure_to', $data ?? [], null);
        $this->setIfExists('tenure_from_in_months', $data ?? [], null);
        $this->setIfExists('tenure_to_in_months', $data ?? [], null);
        $this->setIfExists('start_date', $data ?? [], null);
        $this->setIfExists('end_date', $data ?? [], null);
        $this->setIfExists('min_amount', $data ?? [], null);
        $this->setIfExists('compounding', $data ?? [], null);
        $this->setIfExists('max_amount', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('lockin_period', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ((mb_strlen($this->container['name']) < 1)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['risk_level'] === null) {
            $invalidProperties[] = "'risk_level' can't be null";
        }
        if ((mb_strlen($this->container['risk_level']) < 1)) {
            $invalidProperties[] = "invalid value for 'risk_level', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['partner_id'] === null) {
            $invalidProperties[] = "'partner_id' can't be null";
        }
        if ((mb_strlen($this->container['partner_id']) < 1)) {
            $invalidProperties[] = "invalid value for 'partner_id', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['interest_rate'] === null) {
            $invalidProperties[] = "'interest_rate' can't be null";
        }
        if ($this->container['senior_citizen_interest_rate'] === null) {
            $invalidProperties[] = "'senior_citizen_interest_rate' can't be null";
        }
        if ($this->container['tenure_from'] === null) {
            $invalidProperties[] = "'tenure_from' can't be null";
        }
        if ($this->container['tenure_to'] === null) {
            $invalidProperties[] = "'tenure_to' can't be null";
        }
        if ($this->container['tenure_from_in_months'] === null) {
            $invalidProperties[] = "'tenure_from_in_months' can't be null";
        }
        if ($this->container['tenure_to_in_months'] === null) {
            $invalidProperties[] = "'tenure_to_in_months' can't be null";
        }
        if ($this->container['min_amount'] === null) {
            $invalidProperties[] = "'min_amount' can't be null";
        }
        if ((mb_strlen($this->container['min_amount']) < 1)) {
            $invalidProperties[] = "invalid value for 'min_amount', the character length must be bigger than or equal to 1.";
        }

        if (!preg_match("/\\d+[.\\d{2}]?/", $this->container['min_amount'])) {
            $invalidProperties[] = "invalid value for 'min_amount', must be conform to the pattern /\\d+[.\\d{2}]?/.";
        }

        if ($this->container['compounding'] === null) {
            $invalidProperties[] = "'compounding' can't be null";
        }
        $allowedValues = $this->getCompoundingAllowableValues();
        if (!is_null($this->container['compounding']) && !in_array($this->container['compounding'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'compounding', must be one of '%s'",
                $this->container['compounding'],
                implode("', '", $allowedValues)
            );
        }

        if ((mb_strlen($this->container['compounding']) < 1)) {
            $invalidProperties[] = "invalid value for 'compounding', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['max_amount'] === null) {
            $invalidProperties[] = "'max_amount' can't be null";
        }
        if ((mb_strlen($this->container['max_amount']) < 1)) {
            $invalidProperties[] = "invalid value for 'max_amount', the character length must be bigger than or equal to 1.";
        }

        if (!preg_match("/\\d+[.\\d{2}]?/", $this->container['max_amount'])) {
            $invalidProperties[] = "invalid value for 'max_amount', must be conform to the pattern /\\d+[.\\d{2}]?/.";
        }

        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        if ((mb_strlen($this->container['status']) < 1)) {
            $invalidProperties[] = "invalid value for 'status', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['lockin_period'] === null) {
            $invalidProperties[] = "'lockin_period' can't be null";
        }
        if ((mb_strlen($this->container['lockin_period']) > 3)) {
            $invalidProperties[] = "invalid value for 'lockin_period', the character length must be smaller than or equal to 3.";
        }

        if ((mb_strlen($this->container['lockin_period']) < 1)) {
            $invalidProperties[] = "invalid value for 'lockin_period', the character length must be bigger than or equal to 1.";
        }

        if (!preg_match("/\\d+/", $this->container['lockin_period'])) {
            $invalidProperties[] = "invalid value for 'lockin_period', must be conform to the pattern /\\d+/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name of the Lender
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }

        if ((mb_strlen($name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $name when calling GetFixedDepositPlans200ResponseDataInnerAttributes., must be bigger than or equal to 1.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets risk_level
     *
     * @return string
     */
    public function getRiskLevel()
    {
        return $this->container['risk_level'];
    }

    /**
     * Sets risk_level
     *
     * @param string $risk_level Risk Level (as string)
     *
     * @return self
     */
    public function setRiskLevel($risk_level)
    {
        if (is_null($risk_level)) {
            throw new \InvalidArgumentException('non-nullable risk_level cannot be null');
        }

        if ((mb_strlen($risk_level) < 1)) {
            throw new \InvalidArgumentException('invalid length for $risk_level when calling GetFixedDepositPlans200ResponseDataInnerAttributes., must be bigger than or equal to 1.');
        }

        $this->container['risk_level'] = $risk_level;

        return $this;
    }

    /**
     * Gets partner_id
     *
     * @return string
     */
    public function getPartnerId()
    {
        return $this->container['partner_id'];
    }

    /**
     * Sets partner_id
     *
     * @param string $partner_id Lender ID (slug)
     *
     * @return self
     */
    public function setPartnerId($partner_id)
    {
        if (is_null($partner_id)) {
            throw new \InvalidArgumentException('non-nullable partner_id cannot be null');
        }

        if ((mb_strlen($partner_id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $partner_id when calling GetFixedDepositPlans200ResponseDataInnerAttributes., must be bigger than or equal to 1.');
        }

        $this->container['partner_id'] = $partner_id;

        return $this;
    }

    /**
     * Gets interest_rate
     *
     * @return float
     */
    public function getInterestRate()
    {
        return $this->container['interest_rate'];
    }

    /**
     * Sets interest_rate
     *
     * @param float $interest_rate Interst Rate offered on FD
     *
     * @return self
     */
    public function setInterestRate($interest_rate)
    {
        if (is_null($interest_rate)) {
            throw new \InvalidArgumentException('non-nullable interest_rate cannot be null');
        }
        $this->container['interest_rate'] = $interest_rate;

        return $this;
    }

    /**
     * Gets senior_citizen_interest_rate
     *
     * @return float
     */
    public function getSeniorCitizenInterestRate()
    {
        return $this->container['senior_citizen_interest_rate'];
    }

    /**
     * Sets senior_citizen_interest_rate
     *
     * @param float $senior_citizen_interest_rate Interest Rate for Senior Citizens
     *
     * @return self
     */
    public function setSeniorCitizenInterestRate($senior_citizen_interest_rate)
    {
        if (is_null($senior_citizen_interest_rate)) {
            throw new \InvalidArgumentException('non-nullable senior_citizen_interest_rate cannot be null');
        }
        $this->container['senior_citizen_interest_rate'] = $senior_citizen_interest_rate;

        return $this;
    }

    /**
     * Gets offer_code
     *
     * @return mixed|null
     */
    public function getOfferCode()
    {
        return $this->container['offer_code'];
    }

    /**
     * Sets offer_code
     *
     * @param mixed|null $offer_code Always null
     *
     * @return self
     */
    public function setOfferCode($offer_code)
    {
        if (is_null($offer_code)) {
            array_push($this->openAPINullablesSetToNull, 'offer_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('offer_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['offer_code'] = $offer_code;

        return $this;
    }

    /**
     * Gets tenure_from
     *
     * @return float
     */
    public function getTenureFrom()
    {
        return $this->container['tenure_from'];
    }

    /**
     * Sets tenure_from
     *
     * @param float $tenure_from Minimum FD Tenure in days
     *
     * @return self
     */
    public function setTenureFrom($tenure_from)
    {
        if (is_null($tenure_from)) {
            throw new \InvalidArgumentException('non-nullable tenure_from cannot be null');
        }
        $this->container['tenure_from'] = $tenure_from;

        return $this;
    }

    /**
     * Gets tenure_to
     *
     * @return float
     */
    public function getTenureTo()
    {
        return $this->container['tenure_to'];
    }

    /**
     * Sets tenure_to
     *
     * @param float $tenure_to Maximum FD Tenure in days
     *
     * @return self
     */
    public function setTenureTo($tenure_to)
    {
        if (is_null($tenure_to)) {
            throw new \InvalidArgumentException('non-nullable tenure_to cannot be null');
        }
        $this->container['tenure_to'] = $tenure_to;

        return $this;
    }

    /**
     * Gets tenure_from_in_months
     *
     * @return float
     */
    public function getTenureFromInMonths()
    {
        return $this->container['tenure_from_in_months'];
    }

    /**
     * Sets tenure_from_in_months
     *
     * @param float $tenure_from_in_months Minimum FD Tenure in months
     *
     * @return self
     */
    public function setTenureFromInMonths($tenure_from_in_months)
    {
        if (is_null($tenure_from_in_months)) {
            throw new \InvalidArgumentException('non-nullable tenure_from_in_months cannot be null');
        }
        $this->container['tenure_from_in_months'] = $tenure_from_in_months;

        return $this;
    }

    /**
     * Gets tenure_to_in_months
     *
     * @return float
     */
    public function getTenureToInMonths()
    {
        return $this->container['tenure_to_in_months'];
    }

    /**
     * Sets tenure_to_in_months
     *
     * @param float $tenure_to_in_months Maximum FD Tenure in months
     *
     * @return self
     */
    public function setTenureToInMonths($tenure_to_in_months)
    {
        if (is_null($tenure_to_in_months)) {
            throw new \InvalidArgumentException('non-nullable tenure_to_in_months cannot be null');
        }
        $this->container['tenure_to_in_months'] = $tenure_to_in_months;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return mixed|null
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param mixed|null $start_date null so far
     *
     * @return self
     */
    public function setStartDate($start_date)
    {
        if (is_null($start_date)) {
            array_push($this->openAPINullablesSetToNull, 'start_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('start_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return mixed|null
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param mixed|null $end_date null so far
     *
     * @return self
     */
    public function setEndDate($end_date)
    {
        if (is_null($end_date)) {
            array_push($this->openAPINullablesSetToNull, 'end_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('end_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets min_amount
     *
     * @return string
     */
    public function getMinAmount()
    {
        return $this->container['min_amount'];
    }

    /**
     * Sets min_amount
     *
     * @param string $min_amount Minimum Amount to open the FD as a string in INR. Can contain decimal.
     *
     * @return self
     */
    public function setMinAmount($min_amount)
    {
        if (is_null($min_amount)) {
            throw new \InvalidArgumentException('non-nullable min_amount cannot be null');
        }

        if ((mb_strlen($min_amount) < 1)) {
            throw new \InvalidArgumentException('invalid length for $min_amount when calling GetFixedDepositPlans200ResponseDataInnerAttributes., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/\\d+[.\\d{2}]?/", ObjectSerializer::toString($min_amount)))) {
            throw new \InvalidArgumentException("invalid value for \$min_amount when calling GetFixedDepositPlans200ResponseDataInnerAttributes., must conform to the pattern /\\d+[.\\d{2}]?/.");
        }

        $this->container['min_amount'] = $min_amount;

        return $this;
    }

    /**
     * Gets compounding
     *
     * @return string
     */
    public function getCompounding()
    {
        return $this->container['compounding'];
    }

    /**
     * Sets compounding
     *
     * @param string $compounding Compounding Interval. Usually annually
     *
     * @return self
     */
    public function setCompounding($compounding)
    {
        if (is_null($compounding)) {
            throw new \InvalidArgumentException('non-nullable compounding cannot be null');
        }
        $allowedValues = $this->getCompoundingAllowableValues();
        if (!in_array($compounding, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'compounding', must be one of '%s'",
                    $compounding,
                    implode("', '", $allowedValues)
                )
            );
        }

        if ((mb_strlen($compounding) < 1)) {
            throw new \InvalidArgumentException('invalid length for $compounding when calling GetFixedDepositPlans200ResponseDataInnerAttributes., must be bigger than or equal to 1.');
        }

        $this->container['compounding'] = $compounding;

        return $this;
    }

    /**
     * Gets max_amount
     *
     * @return string
     */
    public function getMaxAmount()
    {
        return $this->container['max_amount'];
    }

    /**
     * Sets max_amount
     *
     * @param string $max_amount Maximum amount for opening the FD. Amount in INR. Can contain decimal point
     *
     * @return self
     */
    public function setMaxAmount($max_amount)
    {
        if (is_null($max_amount)) {
            throw new \InvalidArgumentException('non-nullable max_amount cannot be null');
        }

        if ((mb_strlen($max_amount) < 1)) {
            throw new \InvalidArgumentException('invalid length for $max_amount when calling GetFixedDepositPlans200ResponseDataInnerAttributes., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/\\d+[.\\d{2}]?/", ObjectSerializer::toString($max_amount)))) {
            throw new \InvalidArgumentException("invalid value for \$max_amount when calling GetFixedDepositPlans200ResponseDataInnerAttributes., must conform to the pattern /\\d+[.\\d{2}]?/.");
        }

        $this->container['max_amount'] = $max_amount;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status Status of this FD Plan on Kuvera
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }

        if ((mb_strlen($status) < 1)) {
            throw new \InvalidArgumentException('invalid length for $status when calling GetFixedDepositPlans200ResponseDataInnerAttributes., must be bigger than or equal to 1.');
        }

        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets lockin_period
     *
     * @return string
     */
    public function getLockinPeriod()
    {
        return $this->container['lockin_period'];
    }

    /**
     * Sets lockin_period
     *
     * @param string $lockin_period Locking period in days
     *
     * @return self
     */
    public function setLockinPeriod($lockin_period)
    {
        if (is_null($lockin_period)) {
            throw new \InvalidArgumentException('non-nullable lockin_period cannot be null');
        }
        if ((mb_strlen($lockin_period) > 3)) {
            throw new \InvalidArgumentException('invalid length for $lockin_period when calling GetFixedDepositPlans200ResponseDataInnerAttributes., must be smaller than or equal to 3.');
        }
        if ((mb_strlen($lockin_period) < 1)) {
            throw new \InvalidArgumentException('invalid length for $lockin_period when calling GetFixedDepositPlans200ResponseDataInnerAttributes., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/\\d+/", ObjectSerializer::toString($lockin_period)))) {
            throw new \InvalidArgumentException("invalid value for \$lockin_period when calling GetFixedDepositPlans200ResponseDataInnerAttributes., must conform to the pattern /\\d+/.");
        }

        $this->container['lockin_period'] = $lockin_period;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


