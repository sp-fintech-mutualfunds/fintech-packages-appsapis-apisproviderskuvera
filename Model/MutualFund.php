<?php
/**
 * MutualFund
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Apps\Fintech\Packages\Apis\Providers\Kuvera
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Kuvera
 *
 * Unofficial read API specification for Kuvera.  See Introduction on left to get a summary.
 *
 * The version of the OpenAPI document: 
 * Contact: kuvera.api@captnemo.in
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Apps\Fintech\Packages\Apis\Providers\Kuvera\Model;

use \ArrayAccess;
use \Apps\Fintech\Packages\Apis\Providers\Kuvera\ObjectSerializer;

/**
 * MutualFund Class Doc Comment
 *
 * @category Class
 * @description A compressed representation of a Mutual Fund Plan
 * @package  Apps\Fintech\Packages\Apis\Providers\Kuvera
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class MutualFund implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Mutual-Fund';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'c' => 'string',
        'n' => 'string',
        're' => 'string',
        'r' => '\Apps\Fintech\Packages\Apis\Providers\Kuvera\Model\MutualFundR',
        'v' => 'float',
        'kc' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'c' => null,
        'n' => null,
        're' => null,
        'r' => null,
        'v' => null,
        'kc' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'c' => false,
        'n' => false,
        're' => false,
        'r' => false,
        'v' => false,
        'kc' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'c' => 'c',
        'n' => 'n',
        're' => 're',
        'r' => 'r',
        'v' => 'v',
        'kc' => 'kc'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'c' => 'setC',
        'n' => 'setN',
        're' => 'setRe',
        'r' => 'setR',
        'v' => 'setV',
        'kc' => 'setKc'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'c' => 'getC',
        'n' => 'getN',
        're' => 'getRe',
        'r' => 'getR',
        'v' => 'getV',
        'kc' => 'getKc'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const RE_Z = 'Z';
    public const RE_N = 'N';
    public const RE_Y = 'Y';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getReAllowableValues()
    {
        return [
            self::RE_Z,
            self::RE_N,
            self::RE_Y,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('c', $data ?? [], null);
        $this->setIfExists('n', $data ?? [], null);
        $this->setIfExists('re', $data ?? [], null);
        $this->setIfExists('r', $data ?? [], null);
        $this->setIfExists('v', $data ?? [], null);
        $this->setIfExists('kc', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['c'] === null) {
            $invalidProperties[] = "'c' can't be null";
        }
        if ((mb_strlen($this->container['c']) < 4)) {
            $invalidProperties[] = "invalid value for 'c', the character length must be bigger than or equal to 4.";
        }

        if (!preg_match("/^[A-Z0-9-]+/", $this->container['c'])) {
            $invalidProperties[] = "invalid value for 'c', must be conform to the pattern /^[A-Z0-9-]+/.";
        }

        if ($this->container['n'] === null) {
            $invalidProperties[] = "'n' can't be null";
        }
        if ((mb_strlen($this->container['n']) < 1)) {
            $invalidProperties[] = "invalid value for 'n', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['re'] === null) {
            $invalidProperties[] = "'re' can't be null";
        }
        $allowedValues = $this->getReAllowableValues();
        if (!is_null($this->container['re']) && !in_array($this->container['re'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 're', must be one of '%s'",
                $this->container['re'],
                implode("', '", $allowedValues)
            );
        }

        if ((mb_strlen($this->container['re']) > 1)) {
            $invalidProperties[] = "invalid value for 're', the character length must be smaller than or equal to 1.";
        }

        if ((mb_strlen($this->container['re']) < 0)) {
            $invalidProperties[] = "invalid value for 're', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['r'] === null) {
            $invalidProperties[] = "'r' can't be null";
        }
        if ($this->container['v'] === null) {
            $invalidProperties[] = "'v' can't be null";
        }
        if ($this->container['kc'] === null) {
            $invalidProperties[] = "'kc' can't be null";
        }
        if ((mb_strlen($this->container['kc']) < 1)) {
            $invalidProperties[] = "invalid value for 'kc', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets c
     *
     * @return string
     */
    public function getC()
    {
        return $this->container['c'];
    }

    /**
     * Sets c
     *
     * @param string $c Mutual Fund Code
     *
     * @return self
     */
    public function setC($c)
    {
        if (is_null($c)) {
            throw new \InvalidArgumentException('non-nullable c cannot be null');
        }

        if ((mb_strlen($c) < 4)) {
            throw new \InvalidArgumentException('invalid length for $c when calling MutualFund., must be bigger than or equal to 4.');
        }
        if ((!preg_match("/^[A-Z0-9-]+/", ObjectSerializer::toString($c)))) {
            throw new \InvalidArgumentException("invalid value for \$c when calling MutualFund., must conform to the pattern /^[A-Z0-9-]+/.");
        }

        $this->container['c'] = $c;

        return $this;
    }

    /**
     * Gets n
     *
     * @return string
     */
    public function getN()
    {
        return $this->container['n'];
    }

    /**
     * Sets n
     *
     * @param string $n Scheme Name
     *
     * @return self
     */
    public function setN($n)
    {
        if (is_null($n)) {
            throw new \InvalidArgumentException('non-nullable n cannot be null');
        }

        if ((mb_strlen($n) < 1)) {
            throw new \InvalidArgumentException('invalid length for $n when calling MutualFund., must be bigger than or equal to 1.');
        }

        $this->container['n'] = $n;

        return $this;
    }

    /**
     * Gets re
     *
     * @return string
     */
    public function getRe()
    {
        return $this->container['re'];
    }

    /**
     * Sets re
     *
     * @param string $re Reinvestment
     *
     * @return self
     */
    public function setRe($re)
    {
        if (is_null($re)) {
            throw new \InvalidArgumentException('non-nullable re cannot be null');
        }
        $allowedValues = $this->getReAllowableValues();
        if (!in_array($re, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 're', must be one of '%s'",
                    $re,
                    implode("', '", $allowedValues)
                )
            );
        }
        if ((mb_strlen($re) > 1)) {
            throw new \InvalidArgumentException('invalid length for $re when calling MutualFund., must be smaller than or equal to 1.');
        }
        if ((mb_strlen($re) < 0)) {
            throw new \InvalidArgumentException('invalid length for $re when calling MutualFund., must be bigger than or equal to 0.');
        }

        $this->container['re'] = $re;

        return $this;
    }

    /**
     * Gets r
     *
     * @return \Apps\Fintech\Packages\Apis\Providers\Kuvera\Model\MutualFundR
     */
    public function getR()
    {
        return $this->container['r'];
    }

    /**
     * Sets r
     *
     * @param \Apps\Fintech\Packages\Apis\Providers\Kuvera\Model\MutualFundR $r r
     *
     * @return self
     */
    public function setR($r)
    {
        if (is_null($r)) {
            throw new \InvalidArgumentException('non-nullable r cannot be null');
        }
        $this->container['r'] = $r;

        return $this;
    }

    /**
     * Gets v
     *
     * @return float
     */
    public function getV()
    {
        return $this->container['v'];
    }

    /**
     * Sets v
     *
     * @param float $v Volatility
     *
     * @return self
     */
    public function setV($v)
    {
        if (is_null($v)) {
            throw new \InvalidArgumentException('non-nullable v cannot be null');
        }
        $this->container['v'] = $v;

        return $this;
    }

    /**
     * Gets kc
     *
     * @return string
     */
    public function getKc()
    {
        return $this->container['kc'];
    }

    /**
     * Sets kc
     *
     * @param string $kc Category
     *
     * @return self
     */
    public function setKc($kc)
    {
        if (is_null($kc)) {
            throw new \InvalidArgumentException('non-nullable kc cannot be null');
        }

        if ((mb_strlen($kc) < 1)) {
            throw new \InvalidArgumentException('invalid length for $kc when calling MutualFund., must be bigger than or equal to 1.');
        }

        $this->container['kc'] = $kc;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


