<?php
/**
 * GetFundAmcs200ResponseInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Apps\Fintech\Packages\Apis\Providers\Kuvera
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Kuvera
 *
 * Unofficial read API specification for Kuvera.  See Introduction on left to get a summary.
 *
 * The version of the OpenAPI document: 
 * Contact: kuvera.api@captnemo.in
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Apps\Fintech\Packages\Apis\Providers\Kuvera\Model;

use \ArrayAccess;
use \Apps\Fintech\Packages\Apis\Providers\Kuvera\ObjectSerializer;

/**
 * GetFundAmcs200ResponseInner Class Doc Comment
 *
 * @category Class
 * @description AMC
 * @package  Apps\Fintech\Packages\Apis\Providers\Kuvera
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GetFundAmcs200ResponseInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'get_fund_amcs_200_response_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'amc_code' => 'string',
        'available_for_purchase' => 'int',
        'amc_name' => 'string',
        'image' => 'string',
        'short_code' => 'string',
        'rta_info' => 'string',
        'address' => 'string',
        'phone_number' => 'string',
        'website' => 'string',
        'login_url' => 'string',
        'contact_email' => 'string',
        'description' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'amc_code' => null,
        'available_for_purchase' => null,
        'amc_name' => null,
        'image' => null,
        'short_code' => null,
        'rta_info' => null,
        'address' => null,
        'phone_number' => null,
        'website' => null,
        'login_url' => null,
        'contact_email' => null,
        'description' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'amc_code' => false,
        'available_for_purchase' => false,
        'amc_name' => false,
        'image' => false,
        'short_code' => false,
        'rta_info' => false,
        'address' => false,
        'phone_number' => false,
        'website' => false,
        'login_url' => false,
        'contact_email' => false,
        'description' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'amc_code' => 'AMC_code',
        'available_for_purchase' => 'available_for_purchase',
        'amc_name' => 'amc_name',
        'image' => 'image',
        'short_code' => 'short_code',
        'rta_info' => 'rta_info',
        'address' => 'address',
        'phone_number' => 'phone_number',
        'website' => 'website',
        'login_url' => 'login_url',
        'contact_email' => 'contact_email',
        'description' => 'description'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'amc_code' => 'setAmcCode',
        'available_for_purchase' => 'setAvailableForPurchase',
        'amc_name' => 'setAmcName',
        'image' => 'setImage',
        'short_code' => 'setShortCode',
        'rta_info' => 'setRtaInfo',
        'address' => 'setAddress',
        'phone_number' => 'setPhoneNumber',
        'website' => 'setWebsite',
        'login_url' => 'setLoginUrl',
        'contact_email' => 'setContactEmail',
        'description' => 'setDescription'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'amc_code' => 'getAmcCode',
        'available_for_purchase' => 'getAvailableForPurchase',
        'amc_name' => 'getAmcName',
        'image' => 'getImage',
        'short_code' => 'getShortCode',
        'rta_info' => 'getRtaInfo',
        'address' => 'getAddress',
        'phone_number' => 'getPhoneNumber',
        'website' => 'getWebsite',
        'login_url' => 'getLoginUrl',
        'contact_email' => 'getContactEmail',
        'description' => 'getDescription'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const AVAILABLE_FOR_PURCHASE_NUMBER_0 = 0;
    public const AVAILABLE_FOR_PURCHASE_NUMBER_1 = 1;
    public const AVAILABLE_FOR_PURCHASE_NUMBER_2 = 2;

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAvailableForPurchaseAllowableValues()
    {
        return [
            self::AVAILABLE_FOR_PURCHASE_NUMBER_0,
            self::AVAILABLE_FOR_PURCHASE_NUMBER_1,
            self::AVAILABLE_FOR_PURCHASE_NUMBER_2,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('amc_code', $data ?? [], null);
        $this->setIfExists('available_for_purchase', $data ?? [], self::AVAILABLE_FOR_PURCHASE_NUMBER_2);
        $this->setIfExists('amc_name', $data ?? [], null);
        $this->setIfExists('image', $data ?? [], null);
        $this->setIfExists('short_code', $data ?? [], null);
        $this->setIfExists('rta_info', $data ?? [], null);
        $this->setIfExists('address', $data ?? [], null);
        $this->setIfExists('phone_number', $data ?? [], null);
        $this->setIfExists('website', $data ?? [], null);
        $this->setIfExists('login_url', $data ?? [], null);
        $this->setIfExists('contact_email', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['amc_code'] === null) {
            $invalidProperties[] = "'amc_code' can't be null";
        }
        if ((mb_strlen($this->container['amc_code']) < 1)) {
            $invalidProperties[] = "invalid value for 'amc_code', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['available_for_purchase'] === null) {
            $invalidProperties[] = "'available_for_purchase' can't be null";
        }
        $allowedValues = $this->getAvailableForPurchaseAllowableValues();
        if (!is_null($this->container['available_for_purchase']) && !in_array($this->container['available_for_purchase'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'available_for_purchase', must be one of '%s'",
                $this->container['available_for_purchase'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['amc_name'] === null) {
            $invalidProperties[] = "'amc_name' can't be null";
        }
        if ((mb_strlen($this->container['amc_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'amc_name', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['image'] === null) {
            $invalidProperties[] = "'image' can't be null";
        }
        if ($this->container['short_code'] === null) {
            $invalidProperties[] = "'short_code' can't be null";
        }
        if ((mb_strlen($this->container['short_code']) < 1)) {
            $invalidProperties[] = "invalid value for 'short_code', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['rta_info'] === null) {
            $invalidProperties[] = "'rta_info' can't be null";
        }
        if ((mb_strlen($this->container['rta_info']) < 1)) {
            $invalidProperties[] = "invalid value for 'rta_info', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['address'] === null) {
            $invalidProperties[] = "'address' can't be null";
        }
        if ($this->container['phone_number'] === null) {
            $invalidProperties[] = "'phone_number' can't be null";
        }
        if ($this->container['website'] === null) {
            $invalidProperties[] = "'website' can't be null";
        }
        if ($this->container['login_url'] === null) {
            $invalidProperties[] = "'login_url' can't be null";
        }
        if ($this->container['contact_email'] === null) {
            $invalidProperties[] = "'contact_email' can't be null";
        }
        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets amc_code
     *
     * @return string
     */
    public function getAmcCode()
    {
        return $this->container['amc_code'];
    }

    /**
     * Sets amc_code
     *
     * @param string $amc_code AMC Code
     *
     * @return self
     */
    public function setAmcCode($amc_code)
    {
        if (is_null($amc_code)) {
            throw new \InvalidArgumentException('non-nullable amc_code cannot be null');
        }

        if ((mb_strlen($amc_code) < 1)) {
            throw new \InvalidArgumentException('invalid length for $amc_code when calling GetFundAmcs200ResponseInner., must be bigger than or equal to 1.');
        }

        $this->container['amc_code'] = $amc_code;

        return $this;
    }

    /**
     * Gets available_for_purchase
     *
     * @return int
     */
    public function getAvailableForPurchase()
    {
        return $this->container['available_for_purchase'];
    }

    /**
     * Sets available_for_purchase
     *
     * @param int $available_for_purchase Whether the AMC has schemes available for purchase. 0=No, 1=Temporarily restricted, 2=Yes
     *
     * @return self
     */
    public function setAvailableForPurchase($available_for_purchase)
    {
        if (is_null($available_for_purchase)) {
            throw new \InvalidArgumentException('non-nullable available_for_purchase cannot be null');
        }
        $allowedValues = $this->getAvailableForPurchaseAllowableValues();
        if (!in_array($available_for_purchase, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'available_for_purchase', must be one of '%s'",
                    $available_for_purchase,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['available_for_purchase'] = $available_for_purchase;

        return $this;
    }

    /**
     * Gets amc_name
     *
     * @return string
     */
    public function getAmcName()
    {
        return $this->container['amc_name'];
    }

    /**
     * Sets amc_name
     *
     * @param string $amc_name AMC Name
     *
     * @return self
     */
    public function setAmcName($amc_name)
    {
        if (is_null($amc_name)) {
            throw new \InvalidArgumentException('non-nullable amc_name cannot be null');
        }

        if ((mb_strlen($amc_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $amc_name when calling GetFundAmcs200ResponseInner., must be bigger than or equal to 1.');
        }

        $this->container['amc_name'] = $amc_name;

        return $this;
    }

    /**
     * Gets image
     *
     * @return string
     */
    public function getImage()
    {
        return $this->container['image'];
    }

    /**
     * Sets image
     *
     * @param string $image AMC Logo Image filename
     *
     * @return self
     */
    public function setImage($image)
    {
        if (is_null($image)) {
            throw new \InvalidArgumentException('non-nullable image cannot be null');
        }
        $this->container['image'] = $image;

        return $this;
    }

    /**
     * Gets short_code
     *
     * @return string
     */
    public function getShortCode()
    {
        return $this->container['short_code'];
    }

    /**
     * Sets short_code
     *
     * @param string $short_code AMC short code
     *
     * @return self
     */
    public function setShortCode($short_code)
    {
        if (is_null($short_code)) {
            throw new \InvalidArgumentException('non-nullable short_code cannot be null');
        }

        if ((mb_strlen($short_code) < 1)) {
            throw new \InvalidArgumentException('invalid length for $short_code when calling GetFundAmcs200ResponseInner., must be bigger than or equal to 1.');
        }

        $this->container['short_code'] = $short_code;

        return $this;
    }

    /**
     * Gets rta_info
     *
     * @return string
     */
    public function getRtaInfo()
    {
        return $this->container['rta_info'];
    }

    /**
     * Sets rta_info
     *
     * @param string $rta_info Registrar and Transfer Agent
     *
     * @return self
     */
    public function setRtaInfo($rta_info)
    {
        if (is_null($rta_info)) {
            throw new \InvalidArgumentException('non-nullable rta_info cannot be null');
        }

        if ((mb_strlen($rta_info) < 1)) {
            throw new \InvalidArgumentException('invalid length for $rta_info when calling GetFundAmcs200ResponseInner., must be bigger than or equal to 1.');
        }

        $this->container['rta_info'] = $rta_info;

        return $this;
    }

    /**
     * Gets address
     *
     * @return string
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string $address AMC Address
     *
     * @return self
     */
    public function setAddress($address)
    {
        if (is_null($address)) {
            throw new \InvalidArgumentException('non-nullable address cannot be null');
        }
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets phone_number
     *
     * @return string
     */
    public function getPhoneNumber()
    {
        return $this->container['phone_number'];
    }

    /**
     * Sets phone_number
     *
     * @param string $phone_number AMC Phone number
     *
     * @return self
     */
    public function setPhoneNumber($phone_number)
    {
        if (is_null($phone_number)) {
            throw new \InvalidArgumentException('non-nullable phone_number cannot be null');
        }
        $this->container['phone_number'] = $phone_number;

        return $this;
    }

    /**
     * Gets website
     *
     * @return string
     */
    public function getWebsite()
    {
        return $this->container['website'];
    }

    /**
     * Sets website
     *
     * @param string $website AMC Website
     *
     * @return self
     */
    public function setWebsite($website)
    {
        if (is_null($website)) {
            throw new \InvalidArgumentException('non-nullable website cannot be null');
        }
        $this->container['website'] = $website;

        return $this;
    }

    /**
     * Gets login_url
     *
     * @return string
     */
    public function getLoginUrl()
    {
        return $this->container['login_url'];
    }

    /**
     * Sets login_url
     *
     * @param string $login_url Login URL for the AMC
     *
     * @return self
     */
    public function setLoginUrl($login_url)
    {
        if (is_null($login_url)) {
            throw new \InvalidArgumentException('non-nullable login_url cannot be null');
        }
        $this->container['login_url'] = $login_url;

        return $this;
    }

    /**
     * Gets contact_email
     *
     * @return string
     */
    public function getContactEmail()
    {
        return $this->container['contact_email'];
    }

    /**
     * Sets contact_email
     *
     * @param string $contact_email AMC email address
     *
     * @return self
     */
    public function setContactEmail($contact_email)
    {
        if (is_null($contact_email)) {
            throw new \InvalidArgumentException('non-nullable contact_email cannot be null');
        }
        $this->container['contact_email'] = $contact_email;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description AMC Description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


