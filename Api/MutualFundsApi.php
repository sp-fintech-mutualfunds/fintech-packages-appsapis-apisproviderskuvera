<?php
/**
 * MutualFundsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Apps\Fintech\Packages\Apis\Providers\Kuvera
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Kuvera
 *
 * Unofficial read API specification for Kuvera.  See Introduction on left to get a summary.
 *
 * The version of the OpenAPI document: 
 * Contact: kuvera.api@captnemo.in
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Apps\Fintech\Packages\Apis\Providers\Kuvera\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Apps\Fintech\Packages\Apis\Providers\Kuvera\ApiException;
use Apps\Fintech\Packages\Apis\Providers\Kuvera\Configuration;
use Apps\Fintech\Packages\Apis\Providers\Kuvera\HeaderSelector;
use Apps\Fintech\Packages\Apis\Providers\Kuvera\ObjectSerializer;

/**
 * MutualFundsApi Class Doc Comment
 *
 * @category Class
 * @package  Apps\Fintech\Packages\Apis\Providers\Kuvera
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class MutualFundsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'getFundAmcs' => [
            'application/json',
        ],
        'getFundCategories' => [
            'application/json',
        ],
        'getFundSchemeCategories' => [
            'application/json',
        ],
        'getFundSchemeDetails' => [
            'application/json',
        ],
        'getFundSchemes' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getFundAmcs
     *
     * List all AMCs
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFundAmcs'] to see the possible values for this operation
     *
     * @throws \Apps\Fintech\Packages\Apis\Providers\Kuvera\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Apps\Fintech\Packages\Apis\Providers\Kuvera\Model\GetFundAmcs200ResponseInner[]
     */
    public function getFundAmcs(string $contentType = self::contentTypes['getFundAmcs'][0])
    {
        list($response) = $this->getFundAmcsWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation getFundAmcsWithHttpInfo
     *
     * List all AMCs
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFundAmcs'] to see the possible values for this operation
     *
     * @throws \Apps\Fintech\Packages\Apis\Providers\Kuvera\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Apps\Fintech\Packages\Apis\Providers\Kuvera\Model\GetFundAmcs200ResponseInner[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getFundAmcsWithHttpInfo(string $contentType = self::contentTypes['getFundAmcs'][0])
    {
        $request = $this->getFundAmcsRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Apps\Fintech\Packages\Apis\Providers\Kuvera\Model\GetFundAmcs200ResponseInner[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Apps\Fintech\Packages\Apis\Providers\Kuvera\Model\GetFundAmcs200ResponseInner[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Apps\Fintech\Packages\Apis\Providers\Kuvera\Model\GetFundAmcs200ResponseInner[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Apps\Fintech\Packages\Apis\Providers\Kuvera\Model\GetFundAmcs200ResponseInner[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apps\Fintech\Packages\Apis\Providers\Kuvera\Model\GetFundAmcs200ResponseInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getFundAmcsAsync
     *
     * List all AMCs
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFundAmcs'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFundAmcsAsync(string $contentType = self::contentTypes['getFundAmcs'][0])
    {
        return $this->getFundAmcsAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getFundAmcsAsyncWithHttpInfo
     *
     * List all AMCs
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFundAmcs'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFundAmcsAsyncWithHttpInfo(string $contentType = self::contentTypes['getFundAmcs'][0])
    {
        $returnType = '\Apps\Fintech\Packages\Apis\Providers\Kuvera\Model\GetFundAmcs200ResponseInner[]';
        $request = $this->getFundAmcsRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getFundAmcs'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFundAmcs'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getFundAmcsRequest(string $contentType = self::contentTypes['getFundAmcs'][0])
    {


        $resourcePath = '/mf/api/v5/fund_amcs.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getFundCategories
     *
     * Get Fund Category Returns
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFundCategories'] to see the possible values for this operation
     *
     * @throws \Apps\Fintech\Packages\Apis\Providers\Kuvera\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Apps\Fintech\Packages\Apis\Providers\Kuvera\Model\GetFundCategories200ResponseInner[]
     */
    public function getFundCategories(string $contentType = self::contentTypes['getFundCategories'][0])
    {
        list($response) = $this->getFundCategoriesWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation getFundCategoriesWithHttpInfo
     *
     * Get Fund Category Returns
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFundCategories'] to see the possible values for this operation
     *
     * @throws \Apps\Fintech\Packages\Apis\Providers\Kuvera\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Apps\Fintech\Packages\Apis\Providers\Kuvera\Model\GetFundCategories200ResponseInner[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getFundCategoriesWithHttpInfo(string $contentType = self::contentTypes['getFundCategories'][0])
    {
        $request = $this->getFundCategoriesRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Apps\Fintech\Packages\Apis\Providers\Kuvera\Model\GetFundCategories200ResponseInner[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Apps\Fintech\Packages\Apis\Providers\Kuvera\Model\GetFundCategories200ResponseInner[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Apps\Fintech\Packages\Apis\Providers\Kuvera\Model\GetFundCategories200ResponseInner[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Apps\Fintech\Packages\Apis\Providers\Kuvera\Model\GetFundCategories200ResponseInner[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apps\Fintech\Packages\Apis\Providers\Kuvera\Model\GetFundCategories200ResponseInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getFundCategoriesAsync
     *
     * Get Fund Category Returns
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFundCategories'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFundCategoriesAsync(string $contentType = self::contentTypes['getFundCategories'][0])
    {
        return $this->getFundCategoriesAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getFundCategoriesAsyncWithHttpInfo
     *
     * Get Fund Category Returns
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFundCategories'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFundCategoriesAsyncWithHttpInfo(string $contentType = self::contentTypes['getFundCategories'][0])
    {
        $returnType = '\Apps\Fintech\Packages\Apis\Providers\Kuvera\Model\GetFundCategories200ResponseInner[]';
        $request = $this->getFundCategoriesRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getFundCategories'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFundCategories'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getFundCategoriesRequest(string $contentType = self::contentTypes['getFundCategories'][0])
    {


        $resourcePath = '/mf/api/v4/fund_categories.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getFundSchemeCategories
     *
     * Get Fund Scheme Types and Categorories Returns
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFundSchemeCategories'] to see the possible values for this operation
     *
     * @throws \Apps\Fintech\Packages\Apis\Providers\Kuvera\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array<string,string[]>
     */
    public function getFundSchemeCategories(string $contentType = self::contentTypes['getFundSchemeCategories'][0])
    {
        list($response) = $this->getFundSchemeCategoriesWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation getFundSchemeCategoriesWithHttpInfo
     *
     * Get Fund Scheme Types and Categorories Returns
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFundSchemeCategories'] to see the possible values for this operation
     *
     * @throws \Apps\Fintech\Packages\Apis\Providers\Kuvera\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of array<string,string[]>, HTTP status code, HTTP response headers (array of strings)
     */
    public function getFundSchemeCategoriesWithHttpInfo(string $contentType = self::contentTypes['getFundSchemeCategories'][0])
    {
        $request = $this->getFundSchemeCategoriesRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('array<string,string[]>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string[]>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string[]>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = 'array<string,string[]>';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string[]>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getFundSchemeCategoriesAsync
     *
     * Get Fund Scheme Types and Categorories Returns
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFundSchemeCategories'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFundSchemeCategoriesAsync(string $contentType = self::contentTypes['getFundSchemeCategories'][0])
    {
        return $this->getFundSchemeCategoriesAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getFundSchemeCategoriesAsyncWithHttpInfo
     *
     * Get Fund Scheme Types and Categorories Returns
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFundSchemeCategories'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFundSchemeCategoriesAsyncWithHttpInfo(string $contentType = self::contentTypes['getFundSchemeCategories'][0])
    {
        $returnType = 'array<string,string[]>';
        $request = $this->getFundSchemeCategoriesRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getFundSchemeCategories'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFundSchemeCategories'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getFundSchemeCategoriesRequest(string $contentType = self::contentTypes['getFundSchemeCategories'][0])
    {


        $resourcePath = '/mf/api/v4/fund_scheme_categories.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getFundSchemeDetails
     *
     * Mutual Fund Plan Details
     *
     * @param  string $codes Multiple Mutual Fund Codes, delimited by a pipe (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFundSchemeDetails'] to see the possible values for this operation
     *
     * @throws \Apps\Fintech\Packages\Apis\Providers\Kuvera\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Apps\Fintech\Packages\Apis\Providers\Kuvera\Model\GetFundSchemeDetails200ResponseInner[]
     */
    public function getFundSchemeDetails($codes, string $contentType = self::contentTypes['getFundSchemeDetails'][0])
    {
        list($response) = $this->getFundSchemeDetailsWithHttpInfo($codes, $contentType);
        return $response;
    }

    /**
     * Operation getFundSchemeDetailsWithHttpInfo
     *
     * Mutual Fund Plan Details
     *
     * @param  string $codes Multiple Mutual Fund Codes, delimited by a pipe (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFundSchemeDetails'] to see the possible values for this operation
     *
     * @throws \Apps\Fintech\Packages\Apis\Providers\Kuvera\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Apps\Fintech\Packages\Apis\Providers\Kuvera\Model\GetFundSchemeDetails200ResponseInner[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getFundSchemeDetailsWithHttpInfo($codes, string $contentType = self::contentTypes['getFundSchemeDetails'][0])
    {
        $request = $this->getFundSchemeDetailsRequest($codes, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Apps\Fintech\Packages\Apis\Providers\Kuvera\Model\GetFundSchemeDetails200ResponseInner[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Apps\Fintech\Packages\Apis\Providers\Kuvera\Model\GetFundSchemeDetails200ResponseInner[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Apps\Fintech\Packages\Apis\Providers\Kuvera\Model\GetFundSchemeDetails200ResponseInner[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Apps\Fintech\Packages\Apis\Providers\Kuvera\Model\GetFundSchemeDetails200ResponseInner[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apps\Fintech\Packages\Apis\Providers\Kuvera\Model\GetFundSchemeDetails200ResponseInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getFundSchemeDetailsAsync
     *
     * Mutual Fund Plan Details
     *
     * @param  string $codes Multiple Mutual Fund Codes, delimited by a pipe (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFundSchemeDetails'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFundSchemeDetailsAsync($codes, string $contentType = self::contentTypes['getFundSchemeDetails'][0])
    {
        return $this->getFundSchemeDetailsAsyncWithHttpInfo($codes, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getFundSchemeDetailsAsyncWithHttpInfo
     *
     * Mutual Fund Plan Details
     *
     * @param  string $codes Multiple Mutual Fund Codes, delimited by a pipe (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFundSchemeDetails'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFundSchemeDetailsAsyncWithHttpInfo($codes, string $contentType = self::contentTypes['getFundSchemeDetails'][0])
    {
        $returnType = '\Apps\Fintech\Packages\Apis\Providers\Kuvera\Model\GetFundSchemeDetails200ResponseInner[]';
        $request = $this->getFundSchemeDetailsRequest($codes, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getFundSchemeDetails'
     *
     * @param  string $codes Multiple Mutual Fund Codes, delimited by a pipe (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFundSchemeDetails'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getFundSchemeDetailsRequest($codes, string $contentType = self::contentTypes['getFundSchemeDetails'][0])
    {

        // verify the required parameter 'codes' is set
        if ($codes === null || (is_array($codes) && count($codes) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $codes when calling getFundSchemeDetails'
            );
        }
        if (strlen($codes) < 4) {
            throw new \InvalidArgumentException('invalid length for "$codes" when calling MutualFundsApi.getFundSchemeDetails, must be bigger than or equal to 4.');
        }
        if (!preg_match("/(([A-Z0-9-]+)\\|?)/", $codes)) {
            throw new \InvalidArgumentException("invalid value for \"codes\" when calling MutualFundsApi.getFundSchemeDetails, must conform to the pattern /(([A-Z0-9-]+)\\|?)/.");
        }
        

        $resourcePath = '/mf/api/v5/fund_schemes/{codes}.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($codes !== null) {
            $resourcePath = str_replace(
                '{' . 'codes' . '}',
                ObjectSerializer::toPathValue($codes),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getFundSchemes
     *
     * Get Mutual Funds
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFundSchemes'] to see the possible values for this operation
     *
     * @throws \Apps\Fintech\Packages\Apis\Providers\Kuvera\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array<string,array<string,array<string,\Apps\Fintech\Packages\Apis\Providers\Kuvera\Model\MutualFund[]>>>
     */
    public function getFundSchemes(string $contentType = self::contentTypes['getFundSchemes'][0])
    {
        list($response) = $this->getFundSchemesWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation getFundSchemesWithHttpInfo
     *
     * Get Mutual Funds
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFundSchemes'] to see the possible values for this operation
     *
     * @throws \Apps\Fintech\Packages\Apis\Providers\Kuvera\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of array<string,array<string,array<string,\Apps\Fintech\Packages\Apis\Providers\Kuvera\Model\MutualFund[]>>>, HTTP status code, HTTP response headers (array of strings)
     */
    public function getFundSchemesWithHttpInfo(string $contentType = self::contentTypes['getFundSchemes'][0])
    {
        $request = $this->getFundSchemesRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('array<string,array<string,array<string,\Apps\Fintech\Packages\Apis\Providers\Kuvera\Model\MutualFund[]>>>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,array<string,array<string,\Apps\Fintech\Packages\Apis\Providers\Kuvera\Model\MutualFund[]>>>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,array<string,array<string,\Apps\Fintech\Packages\Apis\Providers\Kuvera\Model\MutualFund[]>>>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = 'array<string,array<string,array<string,\Apps\Fintech\Packages\Apis\Providers\Kuvera\Model\MutualFund[]>>>';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,array<string,array<string,\Apps\Fintech\Packages\Apis\Providers\Kuvera\Model\MutualFund[]>>>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getFundSchemesAsync
     *
     * Get Mutual Funds
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFundSchemes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFundSchemesAsync(string $contentType = self::contentTypes['getFundSchemes'][0])
    {
        return $this->getFundSchemesAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getFundSchemesAsyncWithHttpInfo
     *
     * Get Mutual Funds
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFundSchemes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFundSchemesAsyncWithHttpInfo(string $contentType = self::contentTypes['getFundSchemes'][0])
    {
        $returnType = 'array<string,array<string,array<string,\Apps\Fintech\Packages\Apis\Providers\Kuvera\Model\MutualFund[]>>>';
        $request = $this->getFundSchemesRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getFundSchemes'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFundSchemes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getFundSchemesRequest(string $contentType = self::contentTypes['getFundSchemes'][0])
    {


        $resourcePath = '/mf/api/v4/fund_schemes/list.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
